// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ENVIRONMENT_SCHEMA_H_
#define FLATBUFFERS_GENERATED_ENVIRONMENT_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"


namespace Schema {

struct Environment;

struct Environment FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *systems() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *scenes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(6); }
  const flatbuffers::String *startupScene() const { return GetPointer<const flatbuffers::String *>(8); }
  uint8_t frameworkDebugWindow() const { return GetField<uint8_t>(10, 0); }
  uint8_t schedulerBenchmarking() const { return GetField<uint8_t>(12, 0); }
  int16_t taskManagerThreads() const { return GetField<int16_t>(14, 0); }
  const flatbuffers::String *taskManagerTPEventsForTask() const { return GetPointer<const flatbuffers::String *>(16); }
  const flatbuffers::String *taskManagerTPEventsForSynchronize() const { return GetPointer<const flatbuffers::String *>(18); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* systems */) &&
           verifier.Verify(systems()) &&
           verifier.VerifyVectorOfStrings(systems()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* scenes */) &&
           verifier.Verify(scenes()) &&
           verifier.VerifyVectorOfStrings(scenes()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* startupScene */) &&
           verifier.Verify(startupScene()) &&
           VerifyField<uint8_t>(verifier, 10 /* frameworkDebugWindow */) &&
           VerifyField<uint8_t>(verifier, 12 /* schedulerBenchmarking */) &&
           VerifyField<int16_t>(verifier, 14 /* taskManagerThreads */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* taskManagerTPEventsForTask */) &&
           verifier.Verify(taskManagerTPEventsForTask()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* taskManagerTPEventsForSynchronize */) &&
           verifier.Verify(taskManagerTPEventsForSynchronize()) &&
           verifier.EndTable();
  }
};

struct EnvironmentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_systems(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> systems) { fbb_.AddOffset(4, systems); }
  void add_scenes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> scenes) { fbb_.AddOffset(6, scenes); }
  void add_startupScene(flatbuffers::Offset<flatbuffers::String> startupScene) { fbb_.AddOffset(8, startupScene); }
  void add_frameworkDebugWindow(uint8_t frameworkDebugWindow) { fbb_.AddElement<uint8_t>(10, frameworkDebugWindow, 0); }
  void add_schedulerBenchmarking(uint8_t schedulerBenchmarking) { fbb_.AddElement<uint8_t>(12, schedulerBenchmarking, 0); }
  void add_taskManagerThreads(int16_t taskManagerThreads) { fbb_.AddElement<int16_t>(14, taskManagerThreads, 0); }
  void add_taskManagerTPEventsForTask(flatbuffers::Offset<flatbuffers::String> taskManagerTPEventsForTask) { fbb_.AddOffset(16, taskManagerTPEventsForTask); }
  void add_taskManagerTPEventsForSynchronize(flatbuffers::Offset<flatbuffers::String> taskManagerTPEventsForSynchronize) { fbb_.AddOffset(18, taskManagerTPEventsForSynchronize); }
  EnvironmentBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EnvironmentBuilder &operator=(const EnvironmentBuilder &);
  flatbuffers::Offset<Environment> Finish() {
    auto o = flatbuffers::Offset<Environment>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<Environment> CreateEnvironment(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> systems = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> scenes = 0,
   flatbuffers::Offset<flatbuffers::String> startupScene = 0,
   uint8_t frameworkDebugWindow = 0,
   uint8_t schedulerBenchmarking = 0,
   int16_t taskManagerThreads = 0,
   flatbuffers::Offset<flatbuffers::String> taskManagerTPEventsForTask = 0,
   flatbuffers::Offset<flatbuffers::String> taskManagerTPEventsForSynchronize = 0) {
  EnvironmentBuilder builder_(_fbb);
  builder_.add_taskManagerTPEventsForSynchronize(taskManagerTPEventsForSynchronize);
  builder_.add_taskManagerTPEventsForTask(taskManagerTPEventsForTask);
  builder_.add_startupScene(startupScene);
  builder_.add_scenes(scenes);
  builder_.add_systems(systems);
  builder_.add_taskManagerThreads(taskManagerThreads);
  builder_.add_schedulerBenchmarking(schedulerBenchmarking);
  builder_.add_frameworkDebugWindow(frameworkDebugWindow);
  return builder_.Finish();
}

inline const Environment *GetEnvironment(const void *buf) { return flatbuffers::GetRoot<Environment>(buf); }

inline bool VerifyEnvironmentBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Environment>(); }

inline void FinishEnvironmentBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Environment> root) { fbb.Finish(root); }

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_ENVIRONMENT_SCHEMA_H_
