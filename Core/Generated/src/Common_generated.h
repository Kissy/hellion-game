// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_COMMON_SCHEMA_H_
#define FLATBUFFERS_GENERATED_COMMON_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"


namespace Schema {

struct vector2;
struct Property;
struct SystemObject;
struct Object;
struct System;

enum SystemType {
  Null = 0,
  Generic = 1,
  AI = 2,
  Animation = 4,
  Audio = 8,
  Count = 9,
  Graphic = 16,
  Gui = 32,
  Input = 64,
  Network = 128,
  Physic = 256
};

MANUALLY_ALIGNED_STRUCT(4) vector2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  vector2(float x, float y)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(vector2, 8);

struct Property FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  bool KeyCompareLessThan(const Property *o) const { return *name() < *o->name(); }
  int KeyCompareWithValue(const char *val) const { return strcmp(name()->c_str(), val); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *value() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* value */) &&
           verifier.Verify(value()) &&
           verifier.VerifyVectorOfStrings(value()) &&
           verifier.EndTable();
  }
};

struct PropertyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> value) { fbb_.AddOffset(6, value); }
  PropertyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PropertyBuilder &operator=(const PropertyBuilder &);
  flatbuffers::Offset<Property> Finish() {
    auto o = flatbuffers::Offset<Property>(fbb_.EndTable(start_, 2));
    fbb_.Required(o, 4);  // name
    return o;
  }
};

inline flatbuffers::Offset<Property> CreateProperty(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> value = 0) {
  PropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_name(name);
  return builder_.Finish();
}

struct SystemObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *type() const { return GetPointer<const flatbuffers::String *>(4); }
  SystemType systemType() const { return static_cast<SystemType>(GetField<int16_t>(6, 0)); }
  const flatbuffers::Vector<flatbuffers::Offset<Property>> *properties() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Property>> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, 4 /* type */) &&
           verifier.Verify(type()) &&
           VerifyField<int16_t>(verifier, 6 /* systemType */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* properties */) &&
           verifier.Verify(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct SystemObjectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) { fbb_.AddOffset(4, type); }
  void add_systemType(SystemType systemType) { fbb_.AddElement<int16_t>(6, static_cast<int16_t>(systemType), 0); }
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Property>>> properties) { fbb_.AddOffset(8, properties); }
  SystemObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SystemObjectBuilder &operator=(const SystemObjectBuilder &);
  flatbuffers::Offset<SystemObject> Finish() {
    auto o = flatbuffers::Offset<SystemObject>(fbb_.EndTable(start_, 3));
    fbb_.Required(o, 4);  // type
    return o;
  }
};

inline flatbuffers::Offset<SystemObject> CreateSystemObject(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> type = 0,
   SystemType systemType = Null,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Property>>> properties = 0) {
  SystemObjectBuilder builder_(_fbb);
  builder_.add_properties(properties);
  builder_.add_type(type);
  builder_.add_systemType(systemType);
  return builder_.Finish();
}

struct Object FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *id() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *parent() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *templateObject() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::Vector<flatbuffers::Offset<SystemObject>> *systemObjects() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SystemObject>> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, 4 /* id */) &&
           verifier.Verify(id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* parent */) &&
           verifier.Verify(parent()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* templateObject */) &&
           verifier.Verify(templateObject()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* systemObjects */) &&
           verifier.Verify(systemObjects()) &&
           verifier.VerifyVectorOfTables(systemObjects()) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) { fbb_.AddOffset(4, id); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(6, name); }
  void add_parent(flatbuffers::Offset<flatbuffers::String> parent) { fbb_.AddOffset(8, parent); }
  void add_templateObject(flatbuffers::Offset<flatbuffers::String> templateObject) { fbb_.AddOffset(10, templateObject); }
  void add_systemObjects(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SystemObject>>> systemObjects) { fbb_.AddOffset(12, systemObjects); }
  ObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ObjectBuilder &operator=(const ObjectBuilder &);
  flatbuffers::Offset<Object> Finish() {
    auto o = flatbuffers::Offset<Object>(fbb_.EndTable(start_, 5));
    fbb_.Required(o, 4);  // id
    return o;
  }
};

inline flatbuffers::Offset<Object> CreateObject(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> parent = 0,
   flatbuffers::Offset<flatbuffers::String> templateObject = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SystemObject>>> systemObjects = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_systemObjects(systemObjects);
  builder_.add_templateObject(templateObject);
  builder_.add_parent(parent);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

struct System FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int16_t type() const { return GetField<int16_t>(4, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<Property>> *properties() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Property>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, 4 /* type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* properties */) &&
           verifier.Verify(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct SystemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int16_t type) { fbb_.AddElement<int16_t>(4, type, 0); }
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Property>>> properties) { fbb_.AddOffset(6, properties); }
  SystemBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SystemBuilder &operator=(const SystemBuilder &);
  flatbuffers::Offset<System> Finish() {
    auto o = flatbuffers::Offset<System>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<System> CreateSystem(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t type = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Property>>> properties = 0) {
  SystemBuilder builder_(_fbb);
  builder_.add_properties(properties);
  builder_.add_type(type);
  return builder_.Finish();
}

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_COMMON_SCHEMA_H_
