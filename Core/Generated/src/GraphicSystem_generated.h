// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GRAPHICSYSTEM_SCHEMA_SYSTEMS_H_
#define FLATBUFFERS_GENERATED_GRAPHICSYSTEM_SCHEMA_SYSTEMS_H_

#include "flatbuffers/flatbuffers.h"


namespace Schema {
namespace Systems {

struct Resolution;
struct ResourceLocation;
struct GraphicSystem;

MANUALLY_ALIGNED_STRUCT(4) Resolution FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t width_;
  uint32_t height_;

 public:
  Resolution(uint32_t width, uint32_t height)
    : width_(flatbuffers::EndianScalar(width)), height_(flatbuffers::EndianScalar(height)) { }

  uint32_t width() const { return flatbuffers::EndianScalar(width_); }
  uint32_t height() const { return flatbuffers::EndianScalar(height_); }
};
STRUCT_END(Resolution, 8);

struct ResourceLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *type() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *group() const { return GetPointer<const flatbuffers::String *>(8); }
  uint8_t recursive() const { return GetField<uint8_t>(10, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* type */) &&
           verifier.Verify(type()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* group */) &&
           verifier.Verify(group()) &&
           VerifyField<uint8_t>(verifier, 10 /* recursive */) &&
           verifier.EndTable();
  }
};

struct ResourceLocationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) { fbb_.AddOffset(6, type); }
  void add_group(flatbuffers::Offset<flatbuffers::String> group) { fbb_.AddOffset(8, group); }
  void add_recursive(uint8_t recursive) { fbb_.AddElement<uint8_t>(10, recursive, 0); }
  ResourceLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ResourceLocationBuilder &operator=(const ResourceLocationBuilder &);
  flatbuffers::Offset<ResourceLocation> Finish() {
    auto o = flatbuffers::Offset<ResourceLocation>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<ResourceLocation> CreateResourceLocation(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> type = 0,
   flatbuffers::Offset<flatbuffers::String> group = 0,
   uint8_t recursive = 0) {
  ResourceLocationBuilder builder_(_fbb);
  builder_.add_group(group);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_recursive(recursive);
  return builder_.Finish();
}

struct GraphicSystem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *windowName() const { return GetPointer<const flatbuffers::String *>(4); }
  const Resolution *resolution() const { return GetStruct<const Resolution *>(6); }
  uint8_t fullscreen() const { return GetField<uint8_t>(8, 0); }
  int16_t antiAliasing() const { return GetField<int16_t>(10, 0); }
  int16_t antiAliasingQuality() const { return GetField<int16_t>(12, 0); }
  uint8_t verticalSync() const { return GetField<uint8_t>(14, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<ResourceLocation>> *resources() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ResourceLocation>> *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* windowName */) &&
           verifier.Verify(windowName()) &&
           VerifyField<Resolution>(verifier, 6 /* resolution */) &&
           VerifyField<uint8_t>(verifier, 8 /* fullscreen */) &&
           VerifyField<int16_t>(verifier, 10 /* antiAliasing */) &&
           VerifyField<int16_t>(verifier, 12 /* antiAliasingQuality */) &&
           VerifyField<uint8_t>(verifier, 14 /* verticalSync */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* resources */) &&
           verifier.Verify(resources()) &&
           verifier.VerifyVectorOfTables(resources()) &&
           verifier.EndTable();
  }
};

struct GraphicSystemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_windowName(flatbuffers::Offset<flatbuffers::String> windowName) { fbb_.AddOffset(4, windowName); }
  void add_resolution(const Resolution *resolution) { fbb_.AddStruct(6, resolution); }
  void add_fullscreen(uint8_t fullscreen) { fbb_.AddElement<uint8_t>(8, fullscreen, 0); }
  void add_antiAliasing(int16_t antiAliasing) { fbb_.AddElement<int16_t>(10, antiAliasing, 0); }
  void add_antiAliasingQuality(int16_t antiAliasingQuality) { fbb_.AddElement<int16_t>(12, antiAliasingQuality, 0); }
  void add_verticalSync(uint8_t verticalSync) { fbb_.AddElement<uint8_t>(14, verticalSync, 0); }
  void add_resources(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceLocation>>> resources) { fbb_.AddOffset(16, resources); }
  GraphicSystemBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GraphicSystemBuilder &operator=(const GraphicSystemBuilder &);
  flatbuffers::Offset<GraphicSystem> Finish() {
    auto o = flatbuffers::Offset<GraphicSystem>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<GraphicSystem> CreateGraphicSystem(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> windowName = 0,
   const Resolution *resolution = 0,
   uint8_t fullscreen = 0,
   int16_t antiAliasing = 0,
   int16_t antiAliasingQuality = 0,
   uint8_t verticalSync = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ResourceLocation>>> resources = 0) {
  GraphicSystemBuilder builder_(_fbb);
  builder_.add_resources(resources);
  builder_.add_resolution(resolution);
  builder_.add_windowName(windowName);
  builder_.add_antiAliasingQuality(antiAliasingQuality);
  builder_.add_antiAliasing(antiAliasing);
  builder_.add_verticalSync(verticalSync);
  builder_.add_fullscreen(fullscreen);
  return builder_.Finish();
}

inline const GraphicSystem *GetGraphicSystem(const void *buf) { return flatbuffers::GetRoot<GraphicSystem>(buf); }

inline bool VerifyGraphicSystemBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<GraphicSystem>(); }

inline void FinishGraphicSystemBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<GraphicSystem> root) { fbb.Finish(root); }

}  // namespace Systems
}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_GRAPHICSYSTEM_SCHEMA_SYSTEMS_H_
