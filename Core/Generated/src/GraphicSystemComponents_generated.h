// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GRAPHICSYSTEMCOMPONENTS_SCHEMA_H_
#define FLATBUFFERS_GENERATED_GRAPHICSYSTEMCOMPONENTS_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"


namespace Schema {

struct GraphicCamera;
struct GraphicMesh;

struct GraphicCamera FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GraphicCameraBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  GraphicCameraBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GraphicCameraBuilder &operator=(const GraphicCameraBuilder &);
  flatbuffers::Offset<GraphicCamera> Finish() {
    auto o = flatbuffers::Offset<GraphicCamera>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<GraphicCamera> CreateGraphicCamera(flatbuffers::FlatBufferBuilder &_fbb) {
  GraphicCameraBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GraphicMesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct GraphicMeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  GraphicMeshBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GraphicMeshBuilder &operator=(const GraphicMeshBuilder &);
  flatbuffers::Offset<GraphicMesh> Finish() {
    auto o = flatbuffers::Offset<GraphicMesh>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<GraphicMesh> CreateGraphicMesh(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0) {
  GraphicMeshBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline const Schema::GraphicMesh *GetGraphicMesh(const void *buf) { return flatbuffers::GetRoot<Schema::GraphicMesh>(buf); }

inline bool VerifyGraphicMeshBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Schema::GraphicMesh>(); }

inline void FinishGraphicMeshBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Schema::GraphicMesh> root) { fbb.Finish(root); }

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_GRAPHICSYSTEMCOMPONENTS_SCHEMA_H_
