// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_INPUTSYSTEM_SCHEMA_H_
#define FLATBUFFERS_GENERATED_INPUTSYSTEM_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"


namespace Schema {

struct InputSystemName;
struct InputSystemProperty;
struct InputSystem;

enum InputSystemPropertyData {
  NONE = 0,
  InputSystemName = 1
};

inline const char **EnumNamesInputSystemPropertyData() {
  static const char *names[] = { "NONE", "InputSystemName", nullptr };
  return names;
}

inline const char *EnumNameInputSystemPropertyData(InputSystemPropertyData e) { return EnumNamesInputSystemPropertyData()[e]; }

inline bool VerifyInputSystemPropertyData(flatbuffers::Verifier &verifier, const void *union_obj, InputSystemPropertyData type);

struct InputSystemName FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *value() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* value */) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct InputSystemNameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) { fbb_.AddOffset(4, value); }
  InputSystemNameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InputSystemNameBuilder &operator=(const InputSystemNameBuilder &);
  flatbuffers::Offset<InputSystemName> Finish() {
    auto o = flatbuffers::Offset<InputSystemName>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<InputSystemName> CreateInputSystemName(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> value = 0) {
  InputSystemNameBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct InputSystemProperty FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  InputSystemPropertyData property_type() const { return static_cast<InputSystemPropertyData>(GetField<uint8_t>(4, 0)); }
  const void *property() const { return GetPointer<const void *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* property_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* property */) &&
           VerifyInputSystemPropertyData(verifier, property(), property_type()) &&
           verifier.EndTable();
  }
};

struct InputSystemPropertyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_property_type(InputSystemPropertyData property_type) { fbb_.AddElement<uint8_t>(4, static_cast<uint8_t>(property_type), 0); }
  void add_property(flatbuffers::Offset<void> property) { fbb_.AddOffset(6, property); }
  InputSystemPropertyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InputSystemPropertyBuilder &operator=(const InputSystemPropertyBuilder &);
  flatbuffers::Offset<InputSystemProperty> Finish() {
    auto o = flatbuffers::Offset<InputSystemProperty>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<InputSystemProperty> CreateInputSystemProperty(flatbuffers::FlatBufferBuilder &_fbb,
   InputSystemPropertyData property_type = NONE,
   flatbuffers::Offset<void> property = 0) {
  InputSystemPropertyBuilder builder_(_fbb);
  builder_.add_property(property);
  builder_.add_property_type(property_type);
  return builder_.Finish();
}

struct InputSystem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<InputSystemProperty>> *properties() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<InputSystemProperty>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* properties */) &&
           verifier.Verify(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct InputSystemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<InputSystemProperty>>> properties) { fbb_.AddOffset(4, properties); }
  InputSystemBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InputSystemBuilder &operator=(const InputSystemBuilder &);
  flatbuffers::Offset<InputSystem> Finish() {
    auto o = flatbuffers::Offset<InputSystem>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<InputSystem> CreateInputSystem(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<InputSystemProperty>>> properties = 0) {
  InputSystemBuilder builder_(_fbb);
  builder_.add_properties(properties);
  return builder_.Finish();
}

inline bool VerifyInputSystemPropertyData(flatbuffers::Verifier &verifier, const void *union_obj, InputSystemPropertyData type) {
  switch (type) {
    case NONE: return true;
    case InputSystemName: return verifier.VerifyTable(reinterpret_cast<const InputSystemName *>(union_obj));
    default: return false;
  }
}

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_INPUTSYSTEM_SCHEMA_H_
