// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GRAPHICSYSTEM_SCHEMA_H_
#define FLATBUFFERS_GENERATED_GRAPHICSYSTEM_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"


namespace Schema {

struct ResourceLocation;
struct WindowName;
struct Resolution;
struct ShadowTexture;
struct FullScreen;
struct VerticalSync;
struct FSAntiAliasing;
struct GraphicSystemProperty;
struct GraphicSystem;

enum GraphicSystemPropertyData {
  GraphicSystemPropertyData_NONE = 0,
  GraphicSystemPropertyData_ResourceLocation = 1,
  GraphicSystemPropertyData_WindowName = 2,
  GraphicSystemPropertyData_Resolution = 3,
  GraphicSystemPropertyData_ShadowTexture = 4,
  GraphicSystemPropertyData_FullScreen = 5,
  GraphicSystemPropertyData_VerticalSync = 6,
  GraphicSystemPropertyData_FSAntiAliasing = 7
};

inline const char **EnumNamesGraphicSystemPropertyData() {
  static const char *names[] = { "NONE", "ResourceLocation", "WindowName", "Resolution", "ShadowTexture", "FullScreen", "VerticalSync", "FSAntiAliasing", nullptr };
  return names;
}

inline const char *EnumNameGraphicSystemPropertyData(GraphicSystemPropertyData e) { return EnumNamesGraphicSystemPropertyData()[e]; }

inline bool VerifyGraphicSystemPropertyData(flatbuffers::Verifier &verifier, const void *union_obj, GraphicSystemPropertyData type);

struct ResourceLocation : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ResourceLocationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  ResourceLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ResourceLocationBuilder &operator=(const ResourceLocationBuilder &);
  flatbuffers::Offset<ResourceLocation> Finish() {
    auto o = flatbuffers::Offset<ResourceLocation>(fbb_.EndTable(start_, 0));
    return o;
  }
};

inline flatbuffers::Offset<ResourceLocation> CreateResourceLocation(flatbuffers::FlatBufferBuilder &_fbb) {
  ResourceLocationBuilder builder_(_fbb);
  return builder_.Finish();
}

struct WindowName : private flatbuffers::Table {
  const flatbuffers::String *value() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* value */) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct WindowNameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) { fbb_.AddOffset(4, value); }
  WindowNameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  WindowNameBuilder &operator=(const WindowNameBuilder &);
  flatbuffers::Offset<WindowName> Finish() {
    auto o = flatbuffers::Offset<WindowName>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<WindowName> CreateWindowName(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> value = 0) {
  WindowNameBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Resolution : private flatbuffers::Table {
  float x() const { return GetField<float>(4, 0); }
  float y() const { return GetField<float>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* x */) &&
           VerifyField<float>(verifier, 6 /* y */) &&
           verifier.EndTable();
  }
};

struct ResolutionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(4, x, 0); }
  void add_y(float y) { fbb_.AddElement<float>(6, y, 0); }
  ResolutionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ResolutionBuilder &operator=(const ResolutionBuilder &);
  flatbuffers::Offset<Resolution> Finish() {
    auto o = flatbuffers::Offset<Resolution>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Resolution> CreateResolution(flatbuffers::FlatBufferBuilder &_fbb,
   float x = 0,
   float y = 0) {
  ResolutionBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct ShadowTexture : private flatbuffers::Table {
  float x() const { return GetField<float>(4, 0); }
  float y() const { return GetField<float>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* x */) &&
           VerifyField<float>(verifier, 6 /* y */) &&
           verifier.EndTable();
  }
};

struct ShadowTextureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(4, x, 0); }
  void add_y(float y) { fbb_.AddElement<float>(6, y, 0); }
  ShadowTextureBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ShadowTextureBuilder &operator=(const ShadowTextureBuilder &);
  flatbuffers::Offset<ShadowTexture> Finish() {
    auto o = flatbuffers::Offset<ShadowTexture>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ShadowTexture> CreateShadowTexture(flatbuffers::FlatBufferBuilder &_fbb,
   float x = 0,
   float y = 0) {
  ShadowTextureBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct FullScreen : private flatbuffers::Table {
  uint8_t value() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* value */) &&
           verifier.EndTable();
  }
};

struct FullScreenBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) { fbb_.AddElement<uint8_t>(4, value, 0); }
  FullScreenBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FullScreenBuilder &operator=(const FullScreenBuilder &);
  flatbuffers::Offset<FullScreen> Finish() {
    auto o = flatbuffers::Offset<FullScreen>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<FullScreen> CreateFullScreen(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t value = 0) {
  FullScreenBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct VerticalSync : private flatbuffers::Table {
  uint8_t value() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* value */) &&
           verifier.EndTable();
  }
};

struct VerticalSyncBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) { fbb_.AddElement<uint8_t>(4, value, 0); }
  VerticalSyncBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  VerticalSyncBuilder &operator=(const VerticalSyncBuilder &);
  flatbuffers::Offset<VerticalSync> Finish() {
    auto o = flatbuffers::Offset<VerticalSync>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<VerticalSync> CreateVerticalSync(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t value = 0) {
  VerticalSyncBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct FSAntiAliasing : private flatbuffers::Table {
  float x() const { return GetField<float>(4, 0); }
  float y() const { return GetField<float>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* x */) &&
           VerifyField<float>(verifier, 6 /* y */) &&
           verifier.EndTable();
  }
};

struct FSAntiAliasingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(4, x, 0); }
  void add_y(float y) { fbb_.AddElement<float>(6, y, 0); }
  FSAntiAliasingBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FSAntiAliasingBuilder &operator=(const FSAntiAliasingBuilder &);
  flatbuffers::Offset<FSAntiAliasing> Finish() {
    auto o = flatbuffers::Offset<FSAntiAliasing>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<FSAntiAliasing> CreateFSAntiAliasing(flatbuffers::FlatBufferBuilder &_fbb,
   float x = 0,
   float y = 0) {
  FSAntiAliasingBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct GraphicSystemProperty : private flatbuffers::Table {
  GraphicSystemPropertyData property_type() const { return static_cast<GraphicSystemPropertyData>(GetField<uint8_t>(4, 0)); }
  const void *property() const { return GetPointer<const void *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* property_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* property */) &&
           VerifyGraphicSystemPropertyData(verifier, property(), property_type()) &&
           verifier.EndTable();
  }
};

struct GraphicSystemPropertyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_property_type(GraphicSystemPropertyData property_type) { fbb_.AddElement<uint8_t>(4, static_cast<uint8_t>(property_type), 0); }
  void add_property(flatbuffers::Offset<void> property) { fbb_.AddOffset(6, property); }
  GraphicSystemPropertyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GraphicSystemPropertyBuilder &operator=(const GraphicSystemPropertyBuilder &);
  flatbuffers::Offset<GraphicSystemProperty> Finish() {
    auto o = flatbuffers::Offset<GraphicSystemProperty>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<GraphicSystemProperty> CreateGraphicSystemProperty(flatbuffers::FlatBufferBuilder &_fbb,
   GraphicSystemPropertyData property_type = GraphicSystemPropertyData_NONE,
   flatbuffers::Offset<void> property = 0) {
  GraphicSystemPropertyBuilder builder_(_fbb);
  builder_.add_property(property);
  builder_.add_property_type(property_type);
  return builder_.Finish();
}

struct GraphicSystem : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<GraphicSystemProperty>> *properties() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GraphicSystemProperty>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* properties */) &&
           verifier.Verify(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct GraphicSystemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GraphicSystemProperty>>> properties) { fbb_.AddOffset(4, properties); }
  GraphicSystemBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GraphicSystemBuilder &operator=(const GraphicSystemBuilder &);
  flatbuffers::Offset<GraphicSystem> Finish() {
    auto o = flatbuffers::Offset<GraphicSystem>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<GraphicSystem> CreateGraphicSystem(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GraphicSystemProperty>>> properties = 0) {
  GraphicSystemBuilder builder_(_fbb);
  builder_.add_properties(properties);
  return builder_.Finish();
}

inline bool VerifyGraphicSystemPropertyData(flatbuffers::Verifier &verifier, const void *union_obj, GraphicSystemPropertyData type) {
  switch (type) {
    case GraphicSystemPropertyData_NONE: return true;
    case GraphicSystemPropertyData_ResourceLocation: return verifier.VerifyTable(reinterpret_cast<const ResourceLocation *>(union_obj));
    case GraphicSystemPropertyData_WindowName: return verifier.VerifyTable(reinterpret_cast<const WindowName *>(union_obj));
    case GraphicSystemPropertyData_Resolution: return verifier.VerifyTable(reinterpret_cast<const Resolution *>(union_obj));
    case GraphicSystemPropertyData_ShadowTexture: return verifier.VerifyTable(reinterpret_cast<const ShadowTexture *>(union_obj));
    case GraphicSystemPropertyData_FullScreen: return verifier.VerifyTable(reinterpret_cast<const FullScreen *>(union_obj));
    case GraphicSystemPropertyData_VerticalSync: return verifier.VerifyTable(reinterpret_cast<const VerticalSync *>(union_obj));
    case GraphicSystemPropertyData_FSAntiAliasing: return verifier.VerifyTable(reinterpret_cast<const FSAntiAliasing *>(union_obj));
    default: return false;
  }
}

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_GRAPHICSYSTEM_SCHEMA_H_
