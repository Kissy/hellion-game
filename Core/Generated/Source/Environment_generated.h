// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ENVIRONMENT_SCHEMA_H_
#define FLATBUFFERS_GENERATED_ENVIRONMENT_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

/*#include "Systems_generated.h"*/
#include "GraphicSystem_generated.h"
#include "InputSystem_generated.h"
#include "NetworkSystem_generated.h"
#include "PhysicSystem_generated.h"

namespace Schema {
struct ResourceLocation;
struct WindowName;
struct Resolution;
struct ShadowTexture;
struct FullScreen;
struct VerticalSync;
struct FSAntiAliasing;
struct GraphicSystemProperty;
struct GraphicSystem;
}  // namespace Schema
namespace Schema {
struct InputSystemName;
struct InputSystemProperty;
struct InputSystem;
}  // namespace Schema
namespace Schema {
struct NetworkSystemName;
struct NetworkSystemProperty;
struct NetworkSystem;
}  // namespace Schema
namespace Schema {
struct PhysicSystemName;
struct PhysicSystemProperty;
struct PhysicSystem;
}  // namespace Schema

namespace Schema {

struct Framework_DebugWindow;
struct Scheduler_Benchmarking;
struct TaskManager_Threads;
struct TaskManager_TPEventsForTasks;
struct TaskManager_TPEventsForJobs;
struct TaskManager_TPEventsForSynchronize;
struct EnvironmentProperty;
struct Systems;
struct Environment;

enum EnvironmentPropertyData {
  EnvironmentPropertyData_NONE = 0,
  EnvironmentPropertyData_Framework_DebugWindow = 1,
  EnvironmentPropertyData_Scheduler_Benchmarking = 2,
  EnvironmentPropertyData_TaskManager_Threads = 3,
  EnvironmentPropertyData_TaskManager_TPEventsForTasks = 4,
  EnvironmentPropertyData_TaskManager_TPEventsForJobs = 5,
  EnvironmentPropertyData_TaskManager_TPEventsForSynchronize = 6
};

inline const char **EnumNamesEnvironmentPropertyData() {
  static const char *names[] = { "NONE", "Framework_DebugWindow", "Scheduler_Benchmarking", "TaskManager_Threads", "TaskManager_TPEventsForTasks", "TaskManager_TPEventsForJobs", "TaskManager_TPEventsForSynchronize", nullptr };
  return names;
}

inline const char *EnumNameEnvironmentPropertyData(EnvironmentPropertyData e) { return EnumNamesEnvironmentPropertyData()[e]; }

inline bool VerifyEnvironmentPropertyData(flatbuffers::Verifier &verifier, const void *union_obj, EnvironmentPropertyData type);

enum System {
  System_NONE = 0,
  System_GraphicSystem = 1
};

inline const char **EnumNamesSystem() {
  static const char *names[] = { "NONE", "GraphicSystem", nullptr };
  return names;
}

inline const char *EnumNameSystem(System e) { return EnumNamesSystem()[e]; }

inline bool VerifySystem(flatbuffers::Verifier &verifier, const void *union_obj, System type);

struct Framework_DebugWindow : private flatbuffers::Table {
  uint8_t value() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* value */) &&
           verifier.EndTable();
  }
};

struct Framework_DebugWindowBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) { fbb_.AddElement<uint8_t>(4, value, 0); }
  Framework_DebugWindowBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  Framework_DebugWindowBuilder &operator=(const Framework_DebugWindowBuilder &);
  flatbuffers::Offset<Framework_DebugWindow> Finish() {
    auto o = flatbuffers::Offset<Framework_DebugWindow>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Framework_DebugWindow> CreateFramework_DebugWindow(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t value = 0) {
  Framework_DebugWindowBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Scheduler_Benchmarking : private flatbuffers::Table {
  uint8_t value() const { return GetField<uint8_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* value */) &&
           verifier.EndTable();
  }
};

struct Scheduler_BenchmarkingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint8_t value) { fbb_.AddElement<uint8_t>(4, value, 0); }
  Scheduler_BenchmarkingBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  Scheduler_BenchmarkingBuilder &operator=(const Scheduler_BenchmarkingBuilder &);
  flatbuffers::Offset<Scheduler_Benchmarking> Finish() {
    auto o = flatbuffers::Offset<Scheduler_Benchmarking>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<Scheduler_Benchmarking> CreateScheduler_Benchmarking(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t value = 0) {
  Scheduler_BenchmarkingBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TaskManager_Threads : private flatbuffers::Table {
  int16_t value() const { return GetField<int16_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, 4 /* value */) &&
           verifier.EndTable();
  }
};

struct TaskManager_ThreadsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(int16_t value) { fbb_.AddElement<int16_t>(4, value, 0); }
  TaskManager_ThreadsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TaskManager_ThreadsBuilder &operator=(const TaskManager_ThreadsBuilder &);
  flatbuffers::Offset<TaskManager_Threads> Finish() {
    auto o = flatbuffers::Offset<TaskManager_Threads>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TaskManager_Threads> CreateTaskManager_Threads(flatbuffers::FlatBufferBuilder &_fbb,
   int16_t value = 0) {
  TaskManager_ThreadsBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TaskManager_TPEventsForTasks : private flatbuffers::Table {
  const flatbuffers::String *value() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* value */) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct TaskManager_TPEventsForTasksBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) { fbb_.AddOffset(4, value); }
  TaskManager_TPEventsForTasksBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TaskManager_TPEventsForTasksBuilder &operator=(const TaskManager_TPEventsForTasksBuilder &);
  flatbuffers::Offset<TaskManager_TPEventsForTasks> Finish() {
    auto o = flatbuffers::Offset<TaskManager_TPEventsForTasks>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TaskManager_TPEventsForTasks> CreateTaskManager_TPEventsForTasks(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> value = 0) {
  TaskManager_TPEventsForTasksBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TaskManager_TPEventsForJobs : private flatbuffers::Table {
  const flatbuffers::String *value() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* value */) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct TaskManager_TPEventsForJobsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) { fbb_.AddOffset(4, value); }
  TaskManager_TPEventsForJobsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TaskManager_TPEventsForJobsBuilder &operator=(const TaskManager_TPEventsForJobsBuilder &);
  flatbuffers::Offset<TaskManager_TPEventsForJobs> Finish() {
    auto o = flatbuffers::Offset<TaskManager_TPEventsForJobs>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TaskManager_TPEventsForJobs> CreateTaskManager_TPEventsForJobs(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> value = 0) {
  TaskManager_TPEventsForJobsBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct TaskManager_TPEventsForSynchronize : private flatbuffers::Table {
  const flatbuffers::String *value() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* value */) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct TaskManager_TPEventsForSynchronizeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) { fbb_.AddOffset(4, value); }
  TaskManager_TPEventsForSynchronizeBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TaskManager_TPEventsForSynchronizeBuilder &operator=(const TaskManager_TPEventsForSynchronizeBuilder &);
  flatbuffers::Offset<TaskManager_TPEventsForSynchronize> Finish() {
    auto o = flatbuffers::Offset<TaskManager_TPEventsForSynchronize>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<TaskManager_TPEventsForSynchronize> CreateTaskManager_TPEventsForSynchronize(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> value = 0) {
  TaskManager_TPEventsForSynchronizeBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct EnvironmentProperty : private flatbuffers::Table {
  EnvironmentPropertyData property_type() const { return static_cast<EnvironmentPropertyData>(GetField<uint8_t>(4, 0)); }
  const void *property() const { return GetPointer<const void *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* property_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* property */) &&
           VerifyEnvironmentPropertyData(verifier, property(), property_type()) &&
           verifier.EndTable();
  }
};

struct EnvironmentPropertyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_property_type(EnvironmentPropertyData property_type) { fbb_.AddElement<uint8_t>(4, static_cast<uint8_t>(property_type), 0); }
  void add_property(flatbuffers::Offset<void> property) { fbb_.AddOffset(6, property); }
  EnvironmentPropertyBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EnvironmentPropertyBuilder &operator=(const EnvironmentPropertyBuilder &);
  flatbuffers::Offset<EnvironmentProperty> Finish() {
    auto o = flatbuffers::Offset<EnvironmentProperty>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<EnvironmentProperty> CreateEnvironmentProperty(flatbuffers::FlatBufferBuilder &_fbb,
   EnvironmentPropertyData property_type = EnvironmentPropertyData_NONE,
   flatbuffers::Offset<void> property = 0) {
  EnvironmentPropertyBuilder builder_(_fbb);
  builder_.add_property(property);
  builder_.add_property_type(property_type);
  return builder_.Finish();
}

struct Systems : private flatbuffers::Table {
  System system_type() const { return static_cast<System>(GetField<uint8_t>(4, 0)); }
  const void *system() const { return GetPointer<const void *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* system_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* system */) &&
           VerifySystem(verifier, system(), system_type()) &&
           verifier.EndTable();
  }
};

struct SystemsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_system_type(System system_type) { fbb_.AddElement<uint8_t>(4, static_cast<uint8_t>(system_type), 0); }
  void add_system(flatbuffers::Offset<void> system) { fbb_.AddOffset(6, system); }
  SystemsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SystemsBuilder &operator=(const SystemsBuilder &);
  flatbuffers::Offset<Systems> Finish() {
    auto o = flatbuffers::Offset<Systems>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Systems> CreateSystems(flatbuffers::FlatBufferBuilder &_fbb,
   System system_type = System_NONE,
   flatbuffers::Offset<void> system = 0) {
  SystemsBuilder builder_(_fbb);
  builder_.add_system(system);
  builder_.add_system_type(system_type);
  return builder_.Finish();
}

struct Environment : private flatbuffers::Table {
  const flatbuffers::String *startupScene() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<EnvironmentProperty>> *properties() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<EnvironmentProperty>> *>(6); }
  const flatbuffers::Vector<flatbuffers::Offset<Systems>> *systems() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Systems>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *scenes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* startupScene */) &&
           verifier.Verify(startupScene()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* properties */) &&
           verifier.Verify(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* systems */) &&
           verifier.Verify(systems()) &&
           verifier.VerifyVectorOfTables(systems()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* scenes */) &&
           verifier.Verify(scenes()) &&
           verifier.VerifyVectorOfStrings(scenes()) &&
           verifier.EndTable();
  }
};

struct EnvironmentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_startupScene(flatbuffers::Offset<flatbuffers::String> startupScene) { fbb_.AddOffset(4, startupScene); }
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EnvironmentProperty>>> properties) { fbb_.AddOffset(6, properties); }
  void add_systems(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Systems>>> systems) { fbb_.AddOffset(8, systems); }
  void add_scenes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> scenes) { fbb_.AddOffset(10, scenes); }
  EnvironmentBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EnvironmentBuilder &operator=(const EnvironmentBuilder &);
  flatbuffers::Offset<Environment> Finish() {
    auto o = flatbuffers::Offset<Environment>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<Environment> CreateEnvironment(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> startupScene = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EnvironmentProperty>>> properties = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Systems>>> systems = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> scenes = 0) {
  EnvironmentBuilder builder_(_fbb);
  builder_.add_scenes(scenes);
  builder_.add_systems(systems);
  builder_.add_properties(properties);
  builder_.add_startupScene(startupScene);
  return builder_.Finish();
}

inline bool VerifyEnvironmentPropertyData(flatbuffers::Verifier &verifier, const void *union_obj, EnvironmentPropertyData type) {
  switch (type) {
    case EnvironmentPropertyData_NONE: return true;
    case EnvironmentPropertyData_Framework_DebugWindow: return verifier.VerifyTable(reinterpret_cast<const Framework_DebugWindow *>(union_obj));
    case EnvironmentPropertyData_Scheduler_Benchmarking: return verifier.VerifyTable(reinterpret_cast<const Scheduler_Benchmarking *>(union_obj));
    case EnvironmentPropertyData_TaskManager_Threads: return verifier.VerifyTable(reinterpret_cast<const TaskManager_Threads *>(union_obj));
    case EnvironmentPropertyData_TaskManager_TPEventsForTasks: return verifier.VerifyTable(reinterpret_cast<const TaskManager_TPEventsForTasks *>(union_obj));
    case EnvironmentPropertyData_TaskManager_TPEventsForJobs: return verifier.VerifyTable(reinterpret_cast<const TaskManager_TPEventsForJobs *>(union_obj));
    case EnvironmentPropertyData_TaskManager_TPEventsForSynchronize: return verifier.VerifyTable(reinterpret_cast<const TaskManager_TPEventsForSynchronize *>(union_obj));
    default: return false;
  }
}

inline bool VerifySystem(flatbuffers::Verifier &verifier, const void *union_obj, System type) {
  switch (type) {
    case System_NONE: return true;
    case System_GraphicSystem: return verifier.VerifyTable(reinterpret_cast<const GraphicSystem *>(union_obj));
    default: return false;
  }
}

inline const Environment *GetEnvironment(const void *buf) { return flatbuffers::GetRoot<Environment>(buf); }

inline bool VerifyEnvironmentBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Environment>(); }

inline void FinishEnvironmentBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Environment> root) { fbb.Finish(root); }

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_ENVIRONMENT_SCHEMA_H_
