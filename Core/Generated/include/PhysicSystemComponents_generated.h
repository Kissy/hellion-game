// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PHYSICSYSTEMCOMPONENTS_SCHEMA_H_
#define FLATBUFFERS_GENERATED_PHYSICSYSTEMCOMPONENTS_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"


namespace Schema {

struct PhysicPosition;

struct PhysicPosition FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  float x() const { return GetField<float>(4, 0); }
  bool mutate_x(float x) { return SetField(4, x); }
  float y() const { return GetField<float>(6, 0); }
  bool mutate_y(float y) { return SetField(6, y); }
  float z() const { return GetField<float>(8, 0); }
  bool mutate_z(float z) { return SetField(8, z); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, 4 /* x */) &&
           VerifyField<float>(verifier, 6 /* y */) &&
           VerifyField<float>(verifier, 8 /* z */) &&
           verifier.EndTable();
  }
};

struct PhysicPositionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) { fbb_.AddElement<float>(4, x, 0); }
  void add_y(float y) { fbb_.AddElement<float>(6, y, 0); }
  void add_z(float z) { fbb_.AddElement<float>(8, z, 0); }
  PhysicPositionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PhysicPositionBuilder &operator=(const PhysicPositionBuilder &);
  flatbuffers::Offset<PhysicPosition> Finish() {
    auto o = flatbuffers::Offset<PhysicPosition>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<PhysicPosition> CreatePhysicPosition(flatbuffers::FlatBufferBuilder &_fbb,
   float x = 0,
   float y = 0,
   float z = 0) {
  PhysicPositionBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_PHYSICSYSTEMCOMPONENTS_SCHEMA_H_
