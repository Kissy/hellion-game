// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_INPUTSYSTEMCOMPONENTS_SCHEMA_H_
#define FLATBUFFERS_GENERATED_INPUTSYSTEMCOMPONENTS_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"


namespace Schema {

struct VelocityVector;
struct InputVelocity;

MANUALLY_ALIGNED_STRUCT(4) VelocityVector FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  VelocityVector(float x, float y, float z)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), z_(flatbuffers::EndianScalar(z)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  void mutate_x(float x) { flatbuffers::WriteScalar(&x_, x); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  void mutate_y(float y) { flatbuffers::WriteScalar(&y_, y); }
  float z() const { return flatbuffers::EndianScalar(z_); }
  void mutate_z(float z) { flatbuffers::WriteScalar(&z_, z); }
};
STRUCT_END(VelocityVector, 12);

struct InputVelocity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const VelocityVector *scalar() const { return GetStruct<const VelocityVector *>(4); }
  VelocityVector *mutable_scalar() { return GetStruct<VelocityVector *>(4); }
  const VelocityVector *angular() const { return GetStruct<const VelocityVector *>(6); }
  VelocityVector *mutable_angular() { return GetStruct<VelocityVector *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<VelocityVector>(verifier, 4 /* scalar */) &&
           VerifyField<VelocityVector>(verifier, 6 /* angular */) &&
           verifier.EndTable();
  }
};

struct InputVelocityBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_scalar(const VelocityVector *scalar) { fbb_.AddStruct(4, scalar); }
  void add_angular(const VelocityVector *angular) { fbb_.AddStruct(6, angular); }
  InputVelocityBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InputVelocityBuilder &operator=(const InputVelocityBuilder &);
  flatbuffers::Offset<InputVelocity> Finish() {
    auto o = flatbuffers::Offset<InputVelocity>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<InputVelocity> CreateInputVelocity(flatbuffers::FlatBufferBuilder &_fbb,
   const VelocityVector *scalar = 0,
   const VelocityVector *angular = 0) {
  InputVelocityBuilder builder_(_fbb);
  builder_.add_angular(angular);
  builder_.add_scalar(scalar);
  return builder_.Finish();
}

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_INPUTSYSTEMCOMPONENTS_SCHEMA_H_
