// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_UNIVERSALSCENE_SCHEMA_H_
#define FLATBUFFERS_GENERATED_UNIVERSALSCENE_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

#include "GraphicSystemComponents_generated.h"
#include "InputSystemComponents_generated.h"
#include "PhysicSystemComponents_generated.h"
#include "SystemComponentType_generated.h"
#include "SystemType_generated.h"

namespace Schema {
struct GraphicCamera;
struct GraphicMesh;
}  // namespace Schema
namespace Schema {
struct VelocityVector;
struct InputVelocity;
}  // namespace Schema
namespace Schema {
struct PhysicPosition;
}  // namespace Schema

namespace Schema {

struct MetaData;
struct SystemComponent;
struct SceneEntity;
struct SystemScene;
struct UniversalScene;

struct MetaData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ENTITYID = 4,
    VT_PROTOTYPE = 6,
    VT_NAME = 8,
    VT_COMMENT = 10
  };
  const flatbuffers::String *entityId() const { return GetPointer<const flatbuffers::String *>(VT_ENTITYID); }
  const flatbuffers::String *prototype() const { return GetPointer<const flatbuffers::String *>(VT_PROTOTYPE); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(VT_NAME); }
  const flatbuffers::String *comment() const { return GetPointer<const flatbuffers::String *>(VT_COMMENT); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_ENTITYID) &&
           verifier.Verify(entityId()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PROTOTYPE) &&
           verifier.Verify(prototype()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COMMENT) &&
           verifier.Verify(comment()) &&
           verifier.EndTable();
  }
};

struct MetaDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entityId(flatbuffers::Offset<flatbuffers::String> entityId) { fbb_.AddOffset(MetaData::VT_ENTITYID, entityId); }
  void add_prototype(flatbuffers::Offset<flatbuffers::String> prototype) { fbb_.AddOffset(MetaData::VT_PROTOTYPE, prototype); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(MetaData::VT_NAME, name); }
  void add_comment(flatbuffers::Offset<flatbuffers::String> comment) { fbb_.AddOffset(MetaData::VT_COMMENT, comment); }
  MetaDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MetaDataBuilder &operator=(const MetaDataBuilder &);
  flatbuffers::Offset<MetaData> Finish() {
    auto o = flatbuffers::Offset<MetaData>(fbb_.EndTable(start_, 4));
    fbb_.Required(o, MetaData::VT_ENTITYID);  // entityId
    return o;
  }
};

inline flatbuffers::Offset<MetaData> CreateMetaData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> entityId = 0,
   flatbuffers::Offset<flatbuffers::String> prototype = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> comment = 0) {
  MetaDataBuilder builder_(_fbb);
  builder_.add_comment(comment);
  builder_.add_name(name);
  builder_.add_prototype(prototype);
  builder_.add_entityId(entityId);
  return builder_.Finish();
}

struct SystemComponent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SYSTEMTYPE = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  Schema::SystemType systemType() const { return static_cast<Schema::SystemType>(GetField<uint32_t>(VT_SYSTEMTYPE, 0)); }
  Schema::SystemComponentType data_type() const { return static_cast<Schema::SystemComponentType>(GetField<uint8_t>(VT_DATA_TYPE, 0)); }
  const void *data() const { return GetPointer<const void *>(VT_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SYSTEMTYPE) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           VerifySystemComponentType(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

struct SystemComponentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_systemType(Schema::SystemType systemType) { fbb_.AddElement<uint32_t>(SystemComponent::VT_SYSTEMTYPE, static_cast<uint32_t>(systemType), 0); }
  void add_data_type(Schema::SystemComponentType data_type) { fbb_.AddElement<uint8_t>(SystemComponent::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0); }
  void add_data(flatbuffers::Offset<void> data) { fbb_.AddOffset(SystemComponent::VT_DATA, data); }
  SystemComponentBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SystemComponentBuilder &operator=(const SystemComponentBuilder &);
  flatbuffers::Offset<SystemComponent> Finish() {
    auto o = flatbuffers::Offset<SystemComponent>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SystemComponent> CreateSystemComponent(flatbuffers::FlatBufferBuilder &_fbb,
   Schema::SystemType systemType = Schema::SystemType::Null,
   Schema::SystemComponentType data_type = Schema::SystemComponentType::NONE,
   flatbuffers::Offset<void> data = 0) {
  SystemComponentBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_systemType(systemType);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

struct SceneEntity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_METADATA = 4,
    VT_SYSTEMCOMPONENTS = 6
  };
  const MetaData *metaData() const { return GetPointer<const MetaData *>(VT_METADATA); }
  const flatbuffers::Vector<flatbuffers::Offset<SystemComponent>> *systemComponents() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SystemComponent>> *>(VT_SYSTEMCOMPONENTS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_METADATA) &&
           verifier.VerifyTable(metaData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SYSTEMCOMPONENTS) &&
           verifier.Verify(systemComponents()) &&
           verifier.VerifyVectorOfTables(systemComponents()) &&
           verifier.EndTable();
  }
};

struct SceneEntityBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_metaData(flatbuffers::Offset<MetaData> metaData) { fbb_.AddOffset(SceneEntity::VT_METADATA, metaData); }
  void add_systemComponents(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SystemComponent>>> systemComponents) { fbb_.AddOffset(SceneEntity::VT_SYSTEMCOMPONENTS, systemComponents); }
  SceneEntityBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SceneEntityBuilder &operator=(const SceneEntityBuilder &);
  flatbuffers::Offset<SceneEntity> Finish() {
    auto o = flatbuffers::Offset<SceneEntity>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SceneEntity> CreateSceneEntity(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<MetaData> metaData = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SystemComponent>>> systemComponents = 0) {
  SceneEntityBuilder builder_(_fbb);
  builder_.add_systemComponents(systemComponents);
  builder_.add_metaData(metaData);
  return builder_.Finish();
}

struct SystemScene FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SYSTEMTYPE = 4
  };
  Schema::SystemType systemType() const { return static_cast<Schema::SystemType>(GetField<uint32_t>(VT_SYSTEMTYPE, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SYSTEMTYPE) &&
           verifier.EndTable();
  }
};

struct SystemSceneBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_systemType(Schema::SystemType systemType) { fbb_.AddElement<uint32_t>(SystemScene::VT_SYSTEMTYPE, static_cast<uint32_t>(systemType), 0); }
  SystemSceneBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SystemSceneBuilder &operator=(const SystemSceneBuilder &);
  flatbuffers::Offset<SystemScene> Finish() {
    auto o = flatbuffers::Offset<SystemScene>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<SystemScene> CreateSystemScene(flatbuffers::FlatBufferBuilder &_fbb,
   Schema::SystemType systemType = Schema::SystemType::Null) {
  SystemSceneBuilder builder_(_fbb);
  builder_.add_systemType(systemType);
  return builder_.Finish();
}

struct UniversalScene FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SCENES = 4,
    VT_ENTITIES = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<SystemScene>> *scenes() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SystemScene>> *>(VT_SCENES); }
  const flatbuffers::Vector<flatbuffers::Offset<SceneEntity>> *entities() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SceneEntity>> *>(VT_ENTITIES); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SCENES) &&
           verifier.Verify(scenes()) &&
           verifier.VerifyVectorOfTables(scenes()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ENTITIES) &&
           verifier.Verify(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct UniversalSceneBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_scenes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SystemScene>>> scenes) { fbb_.AddOffset(UniversalScene::VT_SCENES, scenes); }
  void add_entities(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SceneEntity>>> entities) { fbb_.AddOffset(UniversalScene::VT_ENTITIES, entities); }
  UniversalSceneBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  UniversalSceneBuilder &operator=(const UniversalSceneBuilder &);
  flatbuffers::Offset<UniversalScene> Finish() {
    auto o = flatbuffers::Offset<UniversalScene>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<UniversalScene> CreateUniversalScene(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SystemScene>>> scenes = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SceneEntity>>> entities = 0) {
  UniversalSceneBuilder builder_(_fbb);
  builder_.add_entities(entities);
  builder_.add_scenes(scenes);
  return builder_.Finish();
}

inline const Schema::UniversalScene *GetUniversalScene(const void *buf) { return flatbuffers::GetRoot<Schema::UniversalScene>(buf); }

inline bool VerifyUniversalSceneBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Schema::UniversalScene>(); }

inline void FinishUniversalSceneBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Schema::UniversalScene> root) { fbb.Finish(root); }

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_UNIVERSALSCENE_SCHEMA_H_
