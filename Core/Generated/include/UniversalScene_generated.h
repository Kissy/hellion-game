// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_UNIVERSALSCENE_SCHEMA_H_
#define FLATBUFFERS_GENERATED_UNIVERSALSCENE_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

#include "GraphicSystemComponents_generated.h"
#include "SystemComponentType_generated.h"
#include "SystemType_generated.h"

namespace Schema {
struct GraphicCamera;
struct GraphicMesh;
}  // namespace Schema

namespace Schema {

struct MetaData;
struct SystemComponent;
struct SceneEntity;
struct UniversalScene;

struct MetaData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *entityId() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *prototype() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *comment() const { return GetPointer<const flatbuffers::String *>(10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* entityId */) &&
           verifier.Verify(entityId()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* prototype */) &&
           verifier.Verify(prototype()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* comment */) &&
           verifier.Verify(comment()) &&
           verifier.EndTable();
  }
};

struct MetaDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entityId(flatbuffers::Offset<flatbuffers::String> entityId) { fbb_.AddOffset(4, entityId); }
  void add_prototype(flatbuffers::Offset<flatbuffers::String> prototype) { fbb_.AddOffset(6, prototype); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(8, name); }
  void add_comment(flatbuffers::Offset<flatbuffers::String> comment) { fbb_.AddOffset(10, comment); }
  MetaDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MetaDataBuilder &operator=(const MetaDataBuilder &);
  flatbuffers::Offset<MetaData> Finish() {
    auto o = flatbuffers::Offset<MetaData>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<MetaData> CreateMetaData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> entityId = 0,
   flatbuffers::Offset<flatbuffers::String> prototype = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::String> comment = 0) {
  MetaDataBuilder builder_(_fbb);
  builder_.add_comment(comment);
  builder_.add_name(name);
  builder_.add_prototype(prototype);
  builder_.add_entityId(entityId);
  return builder_.Finish();
}

struct SystemComponent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  Schema::SystemType systemType() const { return static_cast<Schema::SystemType>(GetField<uint32_t>(4, 0)); }
  Schema::SystemComponentType data_type() const { return static_cast<Schema::SystemComponentType>(GetField<uint8_t>(6, 0)); }
  const void *data() const { return GetPointer<const void *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* systemType */) &&
           VerifyField<uint8_t>(verifier, 6 /* data_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* data */) &&
           VerifySystemComponentType(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

struct SystemComponentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_systemType(Schema::SystemType systemType) { fbb_.AddElement<uint32_t>(4, static_cast<uint32_t>(systemType), 0); }
  void add_data_type(Schema::SystemComponentType data_type) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(data_type), 0); }
  void add_data(flatbuffers::Offset<void> data) { fbb_.AddOffset(8, data); }
  SystemComponentBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SystemComponentBuilder &operator=(const SystemComponentBuilder &);
  flatbuffers::Offset<SystemComponent> Finish() {
    auto o = flatbuffers::Offset<SystemComponent>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<SystemComponent> CreateSystemComponent(flatbuffers::FlatBufferBuilder &_fbb,
   Schema::SystemType systemType = Schema::SystemType::Null,
   Schema::SystemComponentType data_type = Schema::SystemComponentType::NONE,
   flatbuffers::Offset<void> data = 0) {
  SystemComponentBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_systemType(systemType);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

struct SceneEntity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const MetaData *metaData() const { return GetPointer<const MetaData *>(4); }
  const flatbuffers::Vector<flatbuffers::Offset<SystemComponent>> *systemComponents() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SystemComponent>> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* metaData */) &&
           verifier.VerifyTable(metaData()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* systemComponents */) &&
           verifier.Verify(systemComponents()) &&
           verifier.VerifyVectorOfTables(systemComponents()) &&
           verifier.EndTable();
  }
};

struct SceneEntityBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_metaData(flatbuffers::Offset<MetaData> metaData) { fbb_.AddOffset(4, metaData); }
  void add_systemComponents(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SystemComponent>>> systemComponents) { fbb_.AddOffset(6, systemComponents); }
  SceneEntityBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  SceneEntityBuilder &operator=(const SceneEntityBuilder &);
  flatbuffers::Offset<SceneEntity> Finish() {
    auto o = flatbuffers::Offset<SceneEntity>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<SceneEntity> CreateSceneEntity(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<MetaData> metaData = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SystemComponent>>> systemComponents = 0) {
  SceneEntityBuilder builder_(_fbb);
  builder_.add_systemComponents(systemComponents);
  builder_.add_metaData(metaData);
  return builder_.Finish();
}

struct UniversalScene FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<SceneEntity>> *entities() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SceneEntity>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* entities */) &&
           verifier.Verify(entities()) &&
           verifier.VerifyVectorOfTables(entities()) &&
           verifier.EndTable();
  }
};

struct UniversalSceneBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entities(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SceneEntity>>> entities) { fbb_.AddOffset(4, entities); }
  UniversalSceneBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  UniversalSceneBuilder &operator=(const UniversalSceneBuilder &);
  flatbuffers::Offset<UniversalScene> Finish() {
    auto o = flatbuffers::Offset<UniversalScene>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<UniversalScene> CreateUniversalScene(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SceneEntity>>> entities = 0) {
  UniversalSceneBuilder builder_(_fbb);
  builder_.add_entities(entities);
  return builder_.Finish();
}

inline const Schema::UniversalScene *GetUniversalScene(const void *buf) { return flatbuffers::GetRoot<Schema::UniversalScene>(buf); }

inline bool VerifyUniversalSceneBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Schema::UniversalScene>(); }

inline void FinishUniversalSceneBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Schema::UniversalScene> root) { fbb.Finish(root); }

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_UNIVERSALSCENE_SCHEMA_H_
