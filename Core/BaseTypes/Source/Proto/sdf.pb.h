// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdf.proto

#ifndef PROTOBUF_sdf_2eproto__INCLUDED
#define PROTOBUF_sdf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "property.pb.h"
// @@protoc_insertion_point(includes)

namespace Proto {

    // Internal implementation detail -- do not call these.
    void  protobuf_AddDesc_sdf_2eproto();
    void protobuf_AssignDesc_sdf_2eproto();
    void protobuf_ShutdownFile_sdf_2eproto();

    class Sdf;
    class Sdf_SystemProperties;
    class Sdf_ObjectProperties;
    class Sdf_Object;
    class Sdf_Link;

    // ===================================================================

    class Sdf_SystemProperties : public ::google::protobuf::Message {
        public:
            Sdf_SystemProperties();
            virtual ~Sdf_SystemProperties();

            Sdf_SystemProperties(const Sdf_SystemProperties& from);

            inline Sdf_SystemProperties& operator=(const Sdf_SystemProperties& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const Sdf_SystemProperties& default_instance();

            void Swap(Sdf_SystemProperties* other);

            // implements Message ----------------------------------------------

            Sdf_SystemProperties* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const Sdf_SystemProperties& from);
            void MergeFrom(const Sdf_SystemProperties& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            // required string systemType = 10;
            inline bool has_systemtype() const;
            inline void clear_systemtype();
            static const int kSystemTypeFieldNumber = 10;
            inline const ::std::string& systemtype() const;
            inline void set_systemtype(const ::std::string& value);
            inline void set_systemtype(const char* value);
            inline void set_systemtype(const char* value, size_t size);
            inline ::std::string* mutable_systemtype();
            inline ::std::string* release_systemtype();

            // repeated .Proto.Property properties = 11;
            inline int properties_size() const;
            inline void clear_properties();
            static const int kPropertiesFieldNumber = 11;
            inline const ::Proto::Property& properties(int index) const;
            inline ::Proto::Property* mutable_properties(int index);
            inline ::Proto::Property* add_properties();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
            properties() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
            mutable_properties();

            // @@protoc_insertion_point(class_scope:Proto.Sdf.SystemProperties)
        private:
            inline void set_has_systemtype();
            inline void clear_has_systemtype();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            ::std::string* systemtype_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Property > properties_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

            friend void  protobuf_AddDesc_sdf_2eproto();
            friend void protobuf_AssignDesc_sdf_2eproto();
            friend void protobuf_ShutdownFile_sdf_2eproto();

            void InitAsDefaultInstance();
            static Sdf_SystemProperties* default_instance_;
    };
    // -------------------------------------------------------------------

    class Sdf_ObjectProperties : public ::google::protobuf::Message {
        public:
            Sdf_ObjectProperties();
            virtual ~Sdf_ObjectProperties();

            Sdf_ObjectProperties(const Sdf_ObjectProperties& from);

            inline Sdf_ObjectProperties& operator=(const Sdf_ObjectProperties& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const Sdf_ObjectProperties& default_instance();

            void Swap(Sdf_ObjectProperties* other);

            // implements Message ----------------------------------------------

            Sdf_ObjectProperties* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const Sdf_ObjectProperties& from);
            void MergeFrom(const Sdf_ObjectProperties& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            // required string systemType = 20;
            inline bool has_systemtype() const;
            inline void clear_systemtype();
            static const int kSystemTypeFieldNumber = 20;
            inline const ::std::string& systemtype() const;
            inline void set_systemtype(const ::std::string& value);
            inline void set_systemtype(const char* value);
            inline void set_systemtype(const char* value, size_t size);
            inline ::std::string* mutable_systemtype();
            inline ::std::string* release_systemtype();

            // optional string objectType = 21;
            inline bool has_objecttype() const;
            inline void clear_objecttype();
            static const int kObjectTypeFieldNumber = 21;
            inline const ::std::string& objecttype() const;
            inline void set_objecttype(const ::std::string& value);
            inline void set_objecttype(const char* value);
            inline void set_objecttype(const char* value, size_t size);
            inline ::std::string* mutable_objecttype();
            inline ::std::string* release_objecttype();

            // repeated .Proto.Property properties = 22;
            inline int properties_size() const;
            inline void clear_properties();
            static const int kPropertiesFieldNumber = 22;
            inline const ::Proto::Property& properties(int index) const;
            inline ::Proto::Property* mutable_properties(int index);
            inline ::Proto::Property* add_properties();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
            properties() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
            mutable_properties();

            // @@protoc_insertion_point(class_scope:Proto.Sdf.ObjectProperties)
        private:
            inline void set_has_systemtype();
            inline void clear_has_systemtype();
            inline void set_has_objecttype();
            inline void clear_has_objecttype();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            ::std::string* systemtype_;
            ::std::string* objecttype_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Property > properties_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

            friend void  protobuf_AddDesc_sdf_2eproto();
            friend void protobuf_AssignDesc_sdf_2eproto();
            friend void protobuf_ShutdownFile_sdf_2eproto();

            void InitAsDefaultInstance();
            static Sdf_ObjectProperties* default_instance_;
    };
    // -------------------------------------------------------------------

    class Sdf_Object : public ::google::protobuf::Message {
        public:
            Sdf_Object();
            virtual ~Sdf_Object();

            Sdf_Object(const Sdf_Object& from);

            inline Sdf_Object& operator=(const Sdf_Object& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const Sdf_Object& default_instance();

            void Swap(Sdf_Object* other);

            // implements Message ----------------------------------------------

            Sdf_Object* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const Sdf_Object& from);
            void MergeFrom(const Sdf_Object& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            // required string name = 30;
            inline bool has_name() const;
            inline void clear_name();
            static const int kNameFieldNumber = 30;
            inline const ::std::string& name() const;
            inline void set_name(const ::std::string& value);
            inline void set_name(const char* value);
            inline void set_name(const char* value, size_t size);
            inline ::std::string* mutable_name();
            inline ::std::string* release_name();

            // repeated .Proto.Sdf.ObjectProperties objectProperties = 31;
            inline int objectproperties_size() const;
            inline void clear_objectproperties();
            static const int kObjectPropertiesFieldNumber = 31;
            inline const ::Proto::Sdf_ObjectProperties& objectproperties(int index) const;
            inline ::Proto::Sdf_ObjectProperties* mutable_objectproperties(int index);
            inline ::Proto::Sdf_ObjectProperties* add_objectproperties();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_ObjectProperties >&
            objectproperties() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_ObjectProperties >*
            mutable_objectproperties();

            // @@protoc_insertion_point(class_scope:Proto.Sdf.Object)
        private:
            inline void set_has_name();
            inline void clear_has_name();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            ::std::string* name_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_ObjectProperties > objectproperties_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

            friend void  protobuf_AddDesc_sdf_2eproto();
            friend void protobuf_AssignDesc_sdf_2eproto();
            friend void protobuf_ShutdownFile_sdf_2eproto();

            void InitAsDefaultInstance();
            static Sdf_Object* default_instance_;
    };
    // -------------------------------------------------------------------

    class Sdf_Link : public ::google::protobuf::Message {
        public:
            Sdf_Link();
            virtual ~Sdf_Link();

            Sdf_Link(const Sdf_Link& from);

            inline Sdf_Link& operator=(const Sdf_Link& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const Sdf_Link& default_instance();

            void Swap(Sdf_Link* other);

            // implements Message ----------------------------------------------

            Sdf_Link* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const Sdf_Link& from);
            void MergeFrom(const Sdf_Link& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            // required string subject = 40;
            inline bool has_subject() const;
            inline void clear_subject();
            static const int kSubjectFieldNumber = 40;
            inline const ::std::string& subject() const;
            inline void set_subject(const ::std::string& value);
            inline void set_subject(const char* value);
            inline void set_subject(const char* value, size_t size);
            inline ::std::string* mutable_subject();
            inline ::std::string* release_subject();

            // required string observer = 41;
            inline bool has_observer() const;
            inline void clear_observer();
            static const int kObserverFieldNumber = 41;
            inline const ::std::string& observer() const;
            inline void set_observer(const ::std::string& value);
            inline void set_observer(const char* value);
            inline void set_observer(const char* value, size_t size);
            inline ::std::string* mutable_observer();
            inline ::std::string* release_observer();

            // required string subjectSystem = 42;
            inline bool has_subjectsystem() const;
            inline void clear_subjectsystem();
            static const int kSubjectSystemFieldNumber = 42;
            inline const ::std::string& subjectsystem() const;
            inline void set_subjectsystem(const ::std::string& value);
            inline void set_subjectsystem(const char* value);
            inline void set_subjectsystem(const char* value, size_t size);
            inline ::std::string* mutable_subjectsystem();
            inline ::std::string* release_subjectsystem();

            // required string observerSystem = 43;
            inline bool has_observersystem() const;
            inline void clear_observersystem();
            static const int kObserverSystemFieldNumber = 43;
            inline const ::std::string& observersystem() const;
            inline void set_observersystem(const ::std::string& value);
            inline void set_observersystem(const char* value);
            inline void set_observersystem(const char* value, size_t size);
            inline ::std::string* mutable_observersystem();
            inline ::std::string* release_observersystem();

            // @@protoc_insertion_point(class_scope:Proto.Sdf.Link)
        private:
            inline void set_has_subject();
            inline void clear_has_subject();
            inline void set_has_observer();
            inline void clear_has_observer();
            inline void set_has_subjectsystem();
            inline void clear_has_subjectsystem();
            inline void set_has_observersystem();
            inline void clear_has_observersystem();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            ::std::string* subject_;
            ::std::string* observer_;
            ::std::string* subjectsystem_;
            ::std::string* observersystem_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

            friend void  protobuf_AddDesc_sdf_2eproto();
            friend void protobuf_AssignDesc_sdf_2eproto();
            friend void protobuf_ShutdownFile_sdf_2eproto();

            void InitAsDefaultInstance();
            static Sdf_Link* default_instance_;
    };
    // -------------------------------------------------------------------

    class Sdf : public ::google::protobuf::Message {
        public:
            Sdf();
            virtual ~Sdf();

            Sdf(const Sdf& from);

            inline Sdf& operator=(const Sdf& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const Sdf& default_instance();

            void Swap(Sdf* other);

            // implements Message ----------------------------------------------

            Sdf* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const Sdf& from);
            void MergeFrom(const Sdf& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            typedef Sdf_SystemProperties SystemProperties;
            typedef Sdf_ObjectProperties ObjectProperties;
            typedef Sdf_Object Object;
            typedef Sdf_Link Link;

            // accessors -------------------------------------------------------

            // required string name = 1;
            inline bool has_name() const;
            inline void clear_name();
            static const int kNameFieldNumber = 1;
            inline const ::std::string& name() const;
            inline void set_name(const ::std::string& value);
            inline void set_name(const char* value);
            inline void set_name(const char* value, size_t size);
            inline ::std::string* mutable_name();
            inline ::std::string* release_name();

            // repeated .Proto.Sdf.SystemProperties systemProperties = 2;
            inline int systemproperties_size() const;
            inline void clear_systemproperties();
            static const int kSystemPropertiesFieldNumber = 2;
            inline const ::Proto::Sdf_SystemProperties& systemproperties(int index) const;
            inline ::Proto::Sdf_SystemProperties* mutable_systemproperties(int index);
            inline ::Proto::Sdf_SystemProperties* add_systemproperties();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_SystemProperties >&
            systemproperties() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_SystemProperties >*
            mutable_systemproperties();

            // repeated .Proto.Sdf.Object objects = 3;
            inline int objects_size() const;
            inline void clear_objects();
            static const int kObjectsFieldNumber = 3;
            inline const ::Proto::Sdf_Object& objects(int index) const;
            inline ::Proto::Sdf_Object* mutable_objects(int index);
            inline ::Proto::Sdf_Object* add_objects();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Object >&
            objects() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Object >*
            mutable_objects();

            // repeated .Proto.Sdf.Link links = 4;
            inline int links_size() const;
            inline void clear_links();
            static const int kLinksFieldNumber = 4;
            inline const ::Proto::Sdf_Link& links(int index) const;
            inline ::Proto::Sdf_Link* mutable_links(int index);
            inline ::Proto::Sdf_Link* add_links();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Link >&
            links() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Link >*
            mutable_links();

            // @@protoc_insertion_point(class_scope:Proto.Sdf)
        private:
            inline void set_has_name();
            inline void clear_has_name();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            ::std::string* name_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_SystemProperties > systemproperties_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Object > objects_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Link > links_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

            friend void  protobuf_AddDesc_sdf_2eproto();
            friend void protobuf_AssignDesc_sdf_2eproto();
            friend void protobuf_ShutdownFile_sdf_2eproto();

            void InitAsDefaultInstance();
            static Sdf* default_instance_;
    };
    // ===================================================================


    // ===================================================================

    // Sdf_SystemProperties

    // required string systemType = 10;
    inline bool Sdf_SystemProperties::has_systemtype() const {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void Sdf_SystemProperties::set_has_systemtype() {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void Sdf_SystemProperties::clear_has_systemtype() {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void Sdf_SystemProperties::clear_systemtype() {
        if (systemtype_ != &::google::protobuf::internal::kEmptyString) {
            systemtype_->clear();
        }

        clear_has_systemtype();
    }
    inline const ::std::string& Sdf_SystemProperties::systemtype() const {
        return *systemtype_;
    }
    inline void Sdf_SystemProperties::set_systemtype(const ::std::string& value) {
        set_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            systemtype_ = new ::std::string;
        }

        systemtype_->assign(value);
    }
    inline void Sdf_SystemProperties::set_systemtype(const char* value) {
        set_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            systemtype_ = new ::std::string;
        }

        systemtype_->assign(value);
    }
    inline void Sdf_SystemProperties::set_systemtype(const char* value, size_t size) {
        set_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            systemtype_ = new ::std::string;
        }

        systemtype_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Sdf_SystemProperties::mutable_systemtype() {
        set_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            systemtype_ = new ::std::string;
        }

        return systemtype_;
    }
    inline ::std::string* Sdf_SystemProperties::release_systemtype() {
        clear_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = systemtype_;
            systemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // repeated .Proto.Property properties = 11;
    inline int Sdf_SystemProperties::properties_size() const {
        return properties_.size();
    }
    inline void Sdf_SystemProperties::clear_properties() {
        properties_.Clear();
    }
    inline const ::Proto::Property& Sdf_SystemProperties::properties(int index) const {
        return properties_.Get(index);
    }
    inline ::Proto::Property* Sdf_SystemProperties::mutable_properties(int index) {
        return properties_.Mutable(index);
    }
    inline ::Proto::Property* Sdf_SystemProperties::add_properties() {
        return properties_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
    Sdf_SystemProperties::properties() const {
        return properties_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
    Sdf_SystemProperties::mutable_properties() {
        return &properties_;
    }

    // -------------------------------------------------------------------

    // Sdf_ObjectProperties

    // required string systemType = 20;
    inline bool Sdf_ObjectProperties::has_systemtype() const {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void Sdf_ObjectProperties::set_has_systemtype() {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void Sdf_ObjectProperties::clear_has_systemtype() {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void Sdf_ObjectProperties::clear_systemtype() {
        if (systemtype_ != &::google::protobuf::internal::kEmptyString) {
            systemtype_->clear();
        }

        clear_has_systemtype();
    }
    inline const ::std::string& Sdf_ObjectProperties::systemtype() const {
        return *systemtype_;
    }
    inline void Sdf_ObjectProperties::set_systemtype(const ::std::string& value) {
        set_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            systemtype_ = new ::std::string;
        }

        systemtype_->assign(value);
    }
    inline void Sdf_ObjectProperties::set_systemtype(const char* value) {
        set_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            systemtype_ = new ::std::string;
        }

        systemtype_->assign(value);
    }
    inline void Sdf_ObjectProperties::set_systemtype(const char* value, size_t size) {
        set_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            systemtype_ = new ::std::string;
        }

        systemtype_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Sdf_ObjectProperties::mutable_systemtype() {
        set_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            systemtype_ = new ::std::string;
        }

        return systemtype_;
    }
    inline ::std::string* Sdf_ObjectProperties::release_systemtype() {
        clear_has_systemtype();

        if (systemtype_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = systemtype_;
            systemtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // optional string objectType = 21;
    inline bool Sdf_ObjectProperties::has_objecttype() const {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void Sdf_ObjectProperties::set_has_objecttype() {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void Sdf_ObjectProperties::clear_has_objecttype() {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void Sdf_ObjectProperties::clear_objecttype() {
        if (objecttype_ != &::google::protobuf::internal::kEmptyString) {
            objecttype_->clear();
        }

        clear_has_objecttype();
    }
    inline const ::std::string& Sdf_ObjectProperties::objecttype() const {
        return *objecttype_;
    }
    inline void Sdf_ObjectProperties::set_objecttype(const ::std::string& value) {
        set_has_objecttype();

        if (objecttype_ == &::google::protobuf::internal::kEmptyString) {
            objecttype_ = new ::std::string;
        }

        objecttype_->assign(value);
    }
    inline void Sdf_ObjectProperties::set_objecttype(const char* value) {
        set_has_objecttype();

        if (objecttype_ == &::google::protobuf::internal::kEmptyString) {
            objecttype_ = new ::std::string;
        }

        objecttype_->assign(value);
    }
    inline void Sdf_ObjectProperties::set_objecttype(const char* value, size_t size) {
        set_has_objecttype();

        if (objecttype_ == &::google::protobuf::internal::kEmptyString) {
            objecttype_ = new ::std::string;
        }

        objecttype_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Sdf_ObjectProperties::mutable_objecttype() {
        set_has_objecttype();

        if (objecttype_ == &::google::protobuf::internal::kEmptyString) {
            objecttype_ = new ::std::string;
        }

        return objecttype_;
    }
    inline ::std::string* Sdf_ObjectProperties::release_objecttype() {
        clear_has_objecttype();

        if (objecttype_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = objecttype_;
            objecttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // repeated .Proto.Property properties = 22;
    inline int Sdf_ObjectProperties::properties_size() const {
        return properties_.size();
    }
    inline void Sdf_ObjectProperties::clear_properties() {
        properties_.Clear();
    }
    inline const ::Proto::Property& Sdf_ObjectProperties::properties(int index) const {
        return properties_.Get(index);
    }
    inline ::Proto::Property* Sdf_ObjectProperties::mutable_properties(int index) {
        return properties_.Mutable(index);
    }
    inline ::Proto::Property* Sdf_ObjectProperties::add_properties() {
        return properties_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
    Sdf_ObjectProperties::properties() const {
        return properties_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
    Sdf_ObjectProperties::mutable_properties() {
        return &properties_;
    }

    // -------------------------------------------------------------------

    // Sdf_Object

    // required string name = 30;
    inline bool Sdf_Object::has_name() const {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void Sdf_Object::set_has_name() {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void Sdf_Object::clear_has_name() {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void Sdf_Object::clear_name() {
        if (name_ != &::google::protobuf::internal::kEmptyString) {
            name_->clear();
        }

        clear_has_name();
    }
    inline const ::std::string& Sdf_Object::name() const {
        return *name_;
    }
    inline void Sdf_Object::set_name(const ::std::string& value) {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        name_->assign(value);
    }
    inline void Sdf_Object::set_name(const char* value) {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        name_->assign(value);
    }
    inline void Sdf_Object::set_name(const char* value, size_t size) {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        name_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Sdf_Object::mutable_name() {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        return name_;
    }
    inline ::std::string* Sdf_Object::release_name() {
        clear_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = name_;
            name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // repeated .Proto.Sdf.ObjectProperties objectProperties = 31;
    inline int Sdf_Object::objectproperties_size() const {
        return objectproperties_.size();
    }
    inline void Sdf_Object::clear_objectproperties() {
        objectproperties_.Clear();
    }
    inline const ::Proto::Sdf_ObjectProperties& Sdf_Object::objectproperties(int index) const {
        return objectproperties_.Get(index);
    }
    inline ::Proto::Sdf_ObjectProperties* Sdf_Object::mutable_objectproperties(int index) {
        return objectproperties_.Mutable(index);
    }
    inline ::Proto::Sdf_ObjectProperties* Sdf_Object::add_objectproperties() {
        return objectproperties_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_ObjectProperties >&
    Sdf_Object::objectproperties() const {
        return objectproperties_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_ObjectProperties >*
    Sdf_Object::mutable_objectproperties() {
        return &objectproperties_;
    }

    // -------------------------------------------------------------------

    // Sdf_Link

    // required string subject = 40;
    inline bool Sdf_Link::has_subject() const {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void Sdf_Link::set_has_subject() {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void Sdf_Link::clear_has_subject() {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void Sdf_Link::clear_subject() {
        if (subject_ != &::google::protobuf::internal::kEmptyString) {
            subject_->clear();
        }

        clear_has_subject();
    }
    inline const ::std::string& Sdf_Link::subject() const {
        return *subject_;
    }
    inline void Sdf_Link::set_subject(const ::std::string& value) {
        set_has_subject();

        if (subject_ == &::google::protobuf::internal::kEmptyString) {
            subject_ = new ::std::string;
        }

        subject_->assign(value);
    }
    inline void Sdf_Link::set_subject(const char* value) {
        set_has_subject();

        if (subject_ == &::google::protobuf::internal::kEmptyString) {
            subject_ = new ::std::string;
        }

        subject_->assign(value);
    }
    inline void Sdf_Link::set_subject(const char* value, size_t size) {
        set_has_subject();

        if (subject_ == &::google::protobuf::internal::kEmptyString) {
            subject_ = new ::std::string;
        }

        subject_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Sdf_Link::mutable_subject() {
        set_has_subject();

        if (subject_ == &::google::protobuf::internal::kEmptyString) {
            subject_ = new ::std::string;
        }

        return subject_;
    }
    inline ::std::string* Sdf_Link::release_subject() {
        clear_has_subject();

        if (subject_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = subject_;
            subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // required string observer = 41;
    inline bool Sdf_Link::has_observer() const {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void Sdf_Link::set_has_observer() {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void Sdf_Link::clear_has_observer() {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void Sdf_Link::clear_observer() {
        if (observer_ != &::google::protobuf::internal::kEmptyString) {
            observer_->clear();
        }

        clear_has_observer();
    }
    inline const ::std::string& Sdf_Link::observer() const {
        return *observer_;
    }
    inline void Sdf_Link::set_observer(const ::std::string& value) {
        set_has_observer();

        if (observer_ == &::google::protobuf::internal::kEmptyString) {
            observer_ = new ::std::string;
        }

        observer_->assign(value);
    }
    inline void Sdf_Link::set_observer(const char* value) {
        set_has_observer();

        if (observer_ == &::google::protobuf::internal::kEmptyString) {
            observer_ = new ::std::string;
        }

        observer_->assign(value);
    }
    inline void Sdf_Link::set_observer(const char* value, size_t size) {
        set_has_observer();

        if (observer_ == &::google::protobuf::internal::kEmptyString) {
            observer_ = new ::std::string;
        }

        observer_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Sdf_Link::mutable_observer() {
        set_has_observer();

        if (observer_ == &::google::protobuf::internal::kEmptyString) {
            observer_ = new ::std::string;
        }

        return observer_;
    }
    inline ::std::string* Sdf_Link::release_observer() {
        clear_has_observer();

        if (observer_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = observer_;
            observer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // required string subjectSystem = 42;
    inline bool Sdf_Link::has_subjectsystem() const {
        return (_has_bits_[0] & 0x00000004u) != 0;
    }
    inline void Sdf_Link::set_has_subjectsystem() {
        _has_bits_[0] |= 0x00000004u;
    }
    inline void Sdf_Link::clear_has_subjectsystem() {
        _has_bits_[0] &= ~0x00000004u;
    }
    inline void Sdf_Link::clear_subjectsystem() {
        if (subjectsystem_ != &::google::protobuf::internal::kEmptyString) {
            subjectsystem_->clear();
        }

        clear_has_subjectsystem();
    }
    inline const ::std::string& Sdf_Link::subjectsystem() const {
        return *subjectsystem_;
    }
    inline void Sdf_Link::set_subjectsystem(const ::std::string& value) {
        set_has_subjectsystem();

        if (subjectsystem_ == &::google::protobuf::internal::kEmptyString) {
            subjectsystem_ = new ::std::string;
        }

        subjectsystem_->assign(value);
    }
    inline void Sdf_Link::set_subjectsystem(const char* value) {
        set_has_subjectsystem();

        if (subjectsystem_ == &::google::protobuf::internal::kEmptyString) {
            subjectsystem_ = new ::std::string;
        }

        subjectsystem_->assign(value);
    }
    inline void Sdf_Link::set_subjectsystem(const char* value, size_t size) {
        set_has_subjectsystem();

        if (subjectsystem_ == &::google::protobuf::internal::kEmptyString) {
            subjectsystem_ = new ::std::string;
        }

        subjectsystem_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Sdf_Link::mutable_subjectsystem() {
        set_has_subjectsystem();

        if (subjectsystem_ == &::google::protobuf::internal::kEmptyString) {
            subjectsystem_ = new ::std::string;
        }

        return subjectsystem_;
    }
    inline ::std::string* Sdf_Link::release_subjectsystem() {
        clear_has_subjectsystem();

        if (subjectsystem_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = subjectsystem_;
            subjectsystem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // required string observerSystem = 43;
    inline bool Sdf_Link::has_observersystem() const {
        return (_has_bits_[0] & 0x00000008u) != 0;
    }
    inline void Sdf_Link::set_has_observersystem() {
        _has_bits_[0] |= 0x00000008u;
    }
    inline void Sdf_Link::clear_has_observersystem() {
        _has_bits_[0] &= ~0x00000008u;
    }
    inline void Sdf_Link::clear_observersystem() {
        if (observersystem_ != &::google::protobuf::internal::kEmptyString) {
            observersystem_->clear();
        }

        clear_has_observersystem();
    }
    inline const ::std::string& Sdf_Link::observersystem() const {
        return *observersystem_;
    }
    inline void Sdf_Link::set_observersystem(const ::std::string& value) {
        set_has_observersystem();

        if (observersystem_ == &::google::protobuf::internal::kEmptyString) {
            observersystem_ = new ::std::string;
        }

        observersystem_->assign(value);
    }
    inline void Sdf_Link::set_observersystem(const char* value) {
        set_has_observersystem();

        if (observersystem_ == &::google::protobuf::internal::kEmptyString) {
            observersystem_ = new ::std::string;
        }

        observersystem_->assign(value);
    }
    inline void Sdf_Link::set_observersystem(const char* value, size_t size) {
        set_has_observersystem();

        if (observersystem_ == &::google::protobuf::internal::kEmptyString) {
            observersystem_ = new ::std::string;
        }

        observersystem_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Sdf_Link::mutable_observersystem() {
        set_has_observersystem();

        if (observersystem_ == &::google::protobuf::internal::kEmptyString) {
            observersystem_ = new ::std::string;
        }

        return observersystem_;
    }
    inline ::std::string* Sdf_Link::release_observersystem() {
        clear_has_observersystem();

        if (observersystem_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = observersystem_;
            observersystem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // -------------------------------------------------------------------

    // Sdf

    // required string name = 1;
    inline bool Sdf::has_name() const {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void Sdf::set_has_name() {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void Sdf::clear_has_name() {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void Sdf::clear_name() {
        if (name_ != &::google::protobuf::internal::kEmptyString) {
            name_->clear();
        }

        clear_has_name();
    }
    inline const ::std::string& Sdf::name() const {
        return *name_;
    }
    inline void Sdf::set_name(const ::std::string& value) {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        name_->assign(value);
    }
    inline void Sdf::set_name(const char* value) {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        name_->assign(value);
    }
    inline void Sdf::set_name(const char* value, size_t size) {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        name_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Sdf::mutable_name() {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        return name_;
    }
    inline ::std::string* Sdf::release_name() {
        clear_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = name_;
            name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // repeated .Proto.Sdf.SystemProperties systemProperties = 2;
    inline int Sdf::systemproperties_size() const {
        return systemproperties_.size();
    }
    inline void Sdf::clear_systemproperties() {
        systemproperties_.Clear();
    }
    inline const ::Proto::Sdf_SystemProperties& Sdf::systemproperties(int index) const {
        return systemproperties_.Get(index);
    }
    inline ::Proto::Sdf_SystemProperties* Sdf::mutable_systemproperties(int index) {
        return systemproperties_.Mutable(index);
    }
    inline ::Proto::Sdf_SystemProperties* Sdf::add_systemproperties() {
        return systemproperties_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_SystemProperties >&
    Sdf::systemproperties() const {
        return systemproperties_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_SystemProperties >*
    Sdf::mutable_systemproperties() {
        return &systemproperties_;
    }

    // repeated .Proto.Sdf.Object objects = 3;
    inline int Sdf::objects_size() const {
        return objects_.size();
    }
    inline void Sdf::clear_objects() {
        objects_.Clear();
    }
    inline const ::Proto::Sdf_Object& Sdf::objects(int index) const {
        return objects_.Get(index);
    }
    inline ::Proto::Sdf_Object* Sdf::mutable_objects(int index) {
        return objects_.Mutable(index);
    }
    inline ::Proto::Sdf_Object* Sdf::add_objects() {
        return objects_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Object >&
    Sdf::objects() const {
        return objects_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Object >*
    Sdf::mutable_objects() {
        return &objects_;
    }

    // repeated .Proto.Sdf.Link links = 4;
    inline int Sdf::links_size() const {
        return links_.size();
    }
    inline void Sdf::clear_links() {
        links_.Clear();
    }
    inline const ::Proto::Sdf_Link& Sdf::links(int index) const {
        return links_.Get(index);
    }
    inline ::Proto::Sdf_Link* Sdf::mutable_links(int index) {
        return links_.Mutable(index);
    }
    inline ::Proto::Sdf_Link* Sdf::add_links() {
        return links_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Link >&
    Sdf::links() const {
        return links_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Sdf_Link >*
    Sdf::mutable_links() {
        return &links_;
    }


    // @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

#ifndef SWIG
namespace google {
    namespace protobuf {


    }  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sdf_2eproto__INCLUDED
