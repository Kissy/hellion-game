// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneDefinition.proto

#ifndef PROTOBUF_SceneDefinition_2eproto__INCLUDED
#define PROTOBUF_SceneDefinition_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "System.pb.h"
#include "Object.pb.h"
#include "Property.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneDefinition_2eproto();
void protobuf_AssignDesc_SceneDefinition_2eproto();
void protobuf_ShutdownFile_SceneDefinition_2eproto();

class SceneDefinition;
class SceneDefinition_Link;

// ===================================================================

class SceneDefinition_Link : public ::google::protobuf::Message {
 public:
  SceneDefinition_Link();
  virtual ~SceneDefinition_Link();
  
  SceneDefinition_Link(const SceneDefinition_Link& from);
  
  inline SceneDefinition_Link& operator=(const SceneDefinition_Link& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneDefinition_Link& default_instance();
  
  void Swap(SceneDefinition_Link* other);
  
  // implements Message ----------------------------------------------
  
  SceneDefinition_Link* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneDefinition_Link& from);
  void MergeFrom(const SceneDefinition_Link& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string subject = 30;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 30;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  
  // required string observer = 31;
  inline bool has_observer() const;
  inline void clear_observer();
  static const int kObserverFieldNumber = 31;
  inline const ::std::string& observer() const;
  inline void set_observer(const ::std::string& value);
  inline void set_observer(const char* value);
  inline void set_observer(const char* value, size_t size);
  inline ::std::string* mutable_observer();
  inline ::std::string* release_observer();
  
  // required .System.Type subjectSystemType = 32;
  inline bool has_subjectsystemtype() const;
  inline void clear_subjectsystemtype();
  static const int kSubjectSystemTypeFieldNumber = 32;
  inline ::System_Type subjectsystemtype() const;
  inline void set_subjectsystemtype(::System_Type value);
  
  // required .System.Type observerSystemType = 33;
  inline bool has_observersystemtype() const;
  inline void clear_observersystemtype();
  static const int kObserverSystemTypeFieldNumber = 33;
  inline ::System_Type observersystemtype() const;
  inline void set_observersystemtype(::System_Type value);
  
  // @@protoc_insertion_point(class_scope:SceneDefinition.Link)
 private:
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_observer();
  inline void clear_has_observer();
  inline void set_has_subjectsystemtype();
  inline void clear_has_subjectsystemtype();
  inline void set_has_observersystemtype();
  inline void clear_has_observersystemtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* subject_;
  ::std::string* observer_;
  int subjectsystemtype_;
  int observersystemtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_SceneDefinition_2eproto();
  friend void protobuf_AssignDesc_SceneDefinition_2eproto();
  friend void protobuf_ShutdownFile_SceneDefinition_2eproto();
  
  void InitAsDefaultInstance();
  static SceneDefinition_Link* default_instance_;
};
// -------------------------------------------------------------------

class SceneDefinition : public ::google::protobuf::Message {
 public:
  SceneDefinition();
  virtual ~SceneDefinition();
  
  SceneDefinition(const SceneDefinition& from);
  
  inline SceneDefinition& operator=(const SceneDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneDefinition& default_instance();
  
  void Swap(SceneDefinition* other);
  
  // implements Message ----------------------------------------------
  
  SceneDefinition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneDefinition& from);
  void MergeFrom(const SceneDefinition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SceneDefinition_Link Link;
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .System systems = 2;
  inline int systems_size() const;
  inline void clear_systems();
  static const int kSystemsFieldNumber = 2;
  inline const ::System& systems(int index) const;
  inline ::System* mutable_systems(int index);
  inline ::System* add_systems();
  inline const ::google::protobuf::RepeatedPtrField< ::System >&
      systems() const;
  inline ::google::protobuf::RepeatedPtrField< ::System >*
      mutable_systems();
  
  // repeated .Object objects = 3;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 3;
  inline const ::Object& objects(int index) const;
  inline ::Object* mutable_objects(int index);
  inline ::Object* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::Object >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::Object >*
      mutable_objects();
  
  // repeated .SceneDefinition.Link links = 4;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 4;
  inline const ::SceneDefinition_Link& links(int index) const;
  inline ::SceneDefinition_Link* mutable_links(int index);
  inline ::SceneDefinition_Link* add_links();
  inline const ::google::protobuf::RepeatedPtrField< ::SceneDefinition_Link >&
      links() const;
  inline ::google::protobuf::RepeatedPtrField< ::SceneDefinition_Link >*
      mutable_links();
  
  // @@protoc_insertion_point(class_scope:SceneDefinition)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::System > systems_;
  ::google::protobuf::RepeatedPtrField< ::Object > objects_;
  ::google::protobuf::RepeatedPtrField< ::SceneDefinition_Link > links_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_SceneDefinition_2eproto();
  friend void protobuf_AssignDesc_SceneDefinition_2eproto();
  friend void protobuf_ShutdownFile_SceneDefinition_2eproto();
  
  void InitAsDefaultInstance();
  static SceneDefinition* default_instance_;
};
// ===================================================================


// ===================================================================

// SceneDefinition_Link

// required string subject = 30;
inline bool SceneDefinition_Link::has_subject() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneDefinition_Link::set_has_subject() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneDefinition_Link::clear_has_subject() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneDefinition_Link::clear_subject() {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& SceneDefinition_Link::subject() const {
  return *subject_;
}
inline void SceneDefinition_Link::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void SceneDefinition_Link::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void SceneDefinition_Link::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneDefinition_Link::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  return subject_;
}
inline ::std::string* SceneDefinition_Link::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string observer = 31;
inline bool SceneDefinition_Link::has_observer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneDefinition_Link::set_has_observer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneDefinition_Link::clear_has_observer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneDefinition_Link::clear_observer() {
  if (observer_ != &::google::protobuf::internal::kEmptyString) {
    observer_->clear();
  }
  clear_has_observer();
}
inline const ::std::string& SceneDefinition_Link::observer() const {
  return *observer_;
}
inline void SceneDefinition_Link::set_observer(const ::std::string& value) {
  set_has_observer();
  if (observer_ == &::google::protobuf::internal::kEmptyString) {
    observer_ = new ::std::string;
  }
  observer_->assign(value);
}
inline void SceneDefinition_Link::set_observer(const char* value) {
  set_has_observer();
  if (observer_ == &::google::protobuf::internal::kEmptyString) {
    observer_ = new ::std::string;
  }
  observer_->assign(value);
}
inline void SceneDefinition_Link::set_observer(const char* value, size_t size) {
  set_has_observer();
  if (observer_ == &::google::protobuf::internal::kEmptyString) {
    observer_ = new ::std::string;
  }
  observer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneDefinition_Link::mutable_observer() {
  set_has_observer();
  if (observer_ == &::google::protobuf::internal::kEmptyString) {
    observer_ = new ::std::string;
  }
  return observer_;
}
inline ::std::string* SceneDefinition_Link::release_observer() {
  clear_has_observer();
  if (observer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = observer_;
    observer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .System.Type subjectSystemType = 32;
inline bool SceneDefinition_Link::has_subjectsystemtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneDefinition_Link::set_has_subjectsystemtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneDefinition_Link::clear_has_subjectsystemtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneDefinition_Link::clear_subjectsystemtype() {
  subjectsystemtype_ = 0;
  clear_has_subjectsystemtype();
}
inline ::System_Type SceneDefinition_Link::subjectsystemtype() const {
  return static_cast< ::System_Type >(subjectsystemtype_);
}
inline void SceneDefinition_Link::set_subjectsystemtype(::System_Type value) {
  GOOGLE_DCHECK(::System_Type_IsValid(value));
  set_has_subjectsystemtype();
  subjectsystemtype_ = value;
}

// required .System.Type observerSystemType = 33;
inline bool SceneDefinition_Link::has_observersystemtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneDefinition_Link::set_has_observersystemtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneDefinition_Link::clear_has_observersystemtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneDefinition_Link::clear_observersystemtype() {
  observersystemtype_ = 0;
  clear_has_observersystemtype();
}
inline ::System_Type SceneDefinition_Link::observersystemtype() const {
  return static_cast< ::System_Type >(observersystemtype_);
}
inline void SceneDefinition_Link::set_observersystemtype(::System_Type value) {
  GOOGLE_DCHECK(::System_Type_IsValid(value));
  set_has_observersystemtype();
  observersystemtype_ = value;
}

// -------------------------------------------------------------------

// SceneDefinition

// required string name = 1;
inline bool SceneDefinition::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneDefinition::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneDefinition::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneDefinition::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SceneDefinition::name() const {
  return *name_;
}
inline void SceneDefinition::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SceneDefinition::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SceneDefinition::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneDefinition::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SceneDefinition::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .System systems = 2;
inline int SceneDefinition::systems_size() const {
  return systems_.size();
}
inline void SceneDefinition::clear_systems() {
  systems_.Clear();
}
inline const ::System& SceneDefinition::systems(int index) const {
  return systems_.Get(index);
}
inline ::System* SceneDefinition::mutable_systems(int index) {
  return systems_.Mutable(index);
}
inline ::System* SceneDefinition::add_systems() {
  return systems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::System >&
SceneDefinition::systems() const {
  return systems_;
}
inline ::google::protobuf::RepeatedPtrField< ::System >*
SceneDefinition::mutable_systems() {
  return &systems_;
}

// repeated .Object objects = 3;
inline int SceneDefinition::objects_size() const {
  return objects_.size();
}
inline void SceneDefinition::clear_objects() {
  objects_.Clear();
}
inline const ::Object& SceneDefinition::objects(int index) const {
  return objects_.Get(index);
}
inline ::Object* SceneDefinition::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::Object* SceneDefinition::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Object >&
SceneDefinition::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::Object >*
SceneDefinition::mutable_objects() {
  return &objects_;
}

// repeated .SceneDefinition.Link links = 4;
inline int SceneDefinition::links_size() const {
  return links_.size();
}
inline void SceneDefinition::clear_links() {
  links_.Clear();
}
inline const ::SceneDefinition_Link& SceneDefinition::links(int index) const {
  return links_.Get(index);
}
inline ::SceneDefinition_Link* SceneDefinition::mutable_links(int index) {
  return links_.Mutable(index);
}
inline ::SceneDefinition_Link* SceneDefinition::add_links() {
  return links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SceneDefinition_Link >&
SceneDefinition::links() const {
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::SceneDefinition_Link >*
SceneDefinition::mutable_links() {
  return &links_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneDefinition_2eproto__INCLUDED
