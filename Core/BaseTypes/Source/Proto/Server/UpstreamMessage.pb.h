// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Proto/Server/UpstreamMessage.proto

#ifndef PROTOBUF_Proto_2fServer_2fUpstreamMessage_2eproto__INCLUDED
#define PROTOBUF_Proto_2fServer_2fUpstreamMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Proto_2fServer_2fUpstreamMessage_2eproto();
void protobuf_AssignDesc_Proto_2fServer_2fUpstreamMessage_2eproto();
void protobuf_ShutdownFile_Proto_2fServer_2fUpstreamMessage_2eproto();

class UpstreamMessageProto;

enum UpstreamMessageProto_Type {
  UpstreamMessageProto_Type_ERROR = 1,
  UpstreamMessageProto_Type_UNAUTHORIZED = 2,
  UpstreamMessageProto_Type_AUTHENTICATED = 3
};
bool UpstreamMessageProto_Type_IsValid(int value);
const UpstreamMessageProto_Type UpstreamMessageProto_Type_Type_MIN = UpstreamMessageProto_Type_ERROR;
const UpstreamMessageProto_Type UpstreamMessageProto_Type_Type_MAX = UpstreamMessageProto_Type_AUTHENTICATED;
const int UpstreamMessageProto_Type_Type_ARRAYSIZE = UpstreamMessageProto_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* UpstreamMessageProto_Type_descriptor();
inline const ::std::string& UpstreamMessageProto_Type_Name(UpstreamMessageProto_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    UpstreamMessageProto_Type_descriptor(), value);
}
inline bool UpstreamMessageProto_Type_Parse(
    const ::std::string& name, UpstreamMessageProto_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UpstreamMessageProto_Type>(
    UpstreamMessageProto_Type_descriptor(), name, value);
}
// ===================================================================

class UpstreamMessageProto : public ::google::protobuf::Message {
 public:
  UpstreamMessageProto();
  virtual ~UpstreamMessageProto();
  
  UpstreamMessageProto(const UpstreamMessageProto& from);
  
  inline UpstreamMessageProto& operator=(const UpstreamMessageProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpstreamMessageProto& default_instance();
  
  void Swap(UpstreamMessageProto* other);
  
  // implements Message ----------------------------------------------
  
  UpstreamMessageProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpstreamMessageProto& from);
  void MergeFrom(const UpstreamMessageProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef UpstreamMessageProto_Type Type;
  static const Type ERROR = UpstreamMessageProto_Type_ERROR;
  static const Type UNAUTHORIZED = UpstreamMessageProto_Type_UNAUTHORIZED;
  static const Type AUTHENTICATED = UpstreamMessageProto_Type_AUTHENTICATED;
  static inline bool Type_IsValid(int value) {
    return UpstreamMessageProto_Type_IsValid(value);
  }
  static const Type Type_MIN =
    UpstreamMessageProto_Type_Type_MIN;
  static const Type Type_MAX =
    UpstreamMessageProto_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    UpstreamMessageProto_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return UpstreamMessageProto_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return UpstreamMessageProto_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return UpstreamMessageProto_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .UpstreamMessageProto.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::UpstreamMessageProto_Type type() const;
  inline void set_type(::UpstreamMessageProto_Type value);
  
  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:UpstreamMessageProto)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Proto_2fServer_2fUpstreamMessage_2eproto();
  friend void protobuf_AssignDesc_Proto_2fServer_2fUpstreamMessage_2eproto();
  friend void protobuf_ShutdownFile_Proto_2fServer_2fUpstreamMessage_2eproto();
  
  void InitAsDefaultInstance();
  static UpstreamMessageProto* default_instance_;
};
// ===================================================================


// ===================================================================

// UpstreamMessageProto

// required .UpstreamMessageProto.Type type = 1;
inline bool UpstreamMessageProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpstreamMessageProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpstreamMessageProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpstreamMessageProto::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::UpstreamMessageProto_Type UpstreamMessageProto::type() const {
  return static_cast< ::UpstreamMessageProto_Type >(type_);
}
inline void UpstreamMessageProto::set_type(::UpstreamMessageProto_Type value) {
  GOOGLE_DCHECK(::UpstreamMessageProto_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes data = 2;
inline bool UpstreamMessageProto::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpstreamMessageProto::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpstreamMessageProto::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpstreamMessageProto::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& UpstreamMessageProto::data() const {
  return *data_;
}
inline void UpstreamMessageProto::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void UpstreamMessageProto::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void UpstreamMessageProto::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpstreamMessageProto::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* UpstreamMessageProto::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UpstreamMessageProto_Type>() {
  return ::UpstreamMessageProto_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Proto_2fServer_2fUpstreamMessage_2eproto__INCLUDED
