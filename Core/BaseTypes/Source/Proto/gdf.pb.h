// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gdf.proto

#ifndef PROTOBUF_gdf_2eproto__INCLUDED
#define PROTOBUF_gdf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "property.pb.h"
// @@protoc_insertion_point(includes)

namespace Proto {

    // Internal implementation detail -- do not call these.
    void  protobuf_AddDesc_gdf_2eproto();
    void protobuf_AssignDesc_gdf_2eproto();
    void protobuf_ShutdownFile_gdf_2eproto();

    class Gdf;
    class Gdf_System;
    class Gdf_Scene;

    // ===================================================================

    class Gdf_System : public ::google::protobuf::Message {
        public:
            Gdf_System();
            virtual ~Gdf_System();

            Gdf_System(const Gdf_System& from);

            inline Gdf_System& operator=(const Gdf_System& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const Gdf_System& default_instance();

            void Swap(Gdf_System* other);

            // implements Message ----------------------------------------------

            Gdf_System* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const Gdf_System& from);
            void MergeFrom(const Gdf_System& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            // required string type = 10;
            inline bool has_type() const;
            inline void clear_type();
            static const int kTypeFieldNumber = 10;
            inline const ::std::string& type() const;
            inline void set_type(const ::std::string& value);
            inline void set_type(const char* value);
            inline void set_type(const char* value, size_t size);
            inline ::std::string* mutable_type();
            inline ::std::string* release_type();

            // required string lib = 11;
            inline bool has_lib() const;
            inline void clear_lib();
            static const int kLibFieldNumber = 11;
            inline const ::std::string& lib() const;
            inline void set_lib(const ::std::string& value);
            inline void set_lib(const char* value);
            inline void set_lib(const char* value, size_t size);
            inline ::std::string* mutable_lib();
            inline ::std::string* release_lib();

            // repeated .Proto.Property properties = 12;
            inline int properties_size() const;
            inline void clear_properties();
            static const int kPropertiesFieldNumber = 12;
            inline const ::Proto::Property& properties(int index) const;
            inline ::Proto::Property* mutable_properties(int index);
            inline ::Proto::Property* add_properties();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
            properties() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
            mutable_properties();

            // @@protoc_insertion_point(class_scope:Proto.Gdf.System)
        private:
            inline void set_has_type();
            inline void clear_has_type();
            inline void set_has_lib();
            inline void clear_has_lib();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            ::std::string* type_;
            ::std::string* lib_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Property > properties_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

            friend void  protobuf_AddDesc_gdf_2eproto();
            friend void protobuf_AssignDesc_gdf_2eproto();
            friend void protobuf_ShutdownFile_gdf_2eproto();

            void InitAsDefaultInstance();
            static Gdf_System* default_instance_;
    };
    // -------------------------------------------------------------------

    class Gdf_Scene : public ::google::protobuf::Message {
        public:
            Gdf_Scene();
            virtual ~Gdf_Scene();

            Gdf_Scene(const Gdf_Scene& from);

            inline Gdf_Scene& operator=(const Gdf_Scene& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const Gdf_Scene& default_instance();

            void Swap(Gdf_Scene* other);

            // implements Message ----------------------------------------------

            Gdf_Scene* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const Gdf_Scene& from);
            void MergeFrom(const Gdf_Scene& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            // required string name = 20;
            inline bool has_name() const;
            inline void clear_name();
            static const int kNameFieldNumber = 20;
            inline const ::std::string& name() const;
            inline void set_name(const ::std::string& value);
            inline void set_name(const char* value);
            inline void set_name(const char* value, size_t size);
            inline ::std::string* mutable_name();
            inline ::std::string* release_name();

            // required string sdf = 21;
            inline bool has_sdf() const;
            inline void clear_sdf();
            static const int kSdfFieldNumber = 21;
            inline const ::std::string& sdf() const;
            inline void set_sdf(const ::std::string& value);
            inline void set_sdf(const char* value);
            inline void set_sdf(const char* value, size_t size);
            inline ::std::string* mutable_sdf();
            inline ::std::string* release_sdf();

            // @@protoc_insertion_point(class_scope:Proto.Gdf.Scene)
        private:
            inline void set_has_name();
            inline void clear_has_name();
            inline void set_has_sdf();
            inline void clear_has_sdf();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            ::std::string* name_;
            ::std::string* sdf_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

            friend void  protobuf_AddDesc_gdf_2eproto();
            friend void protobuf_AssignDesc_gdf_2eproto();
            friend void protobuf_ShutdownFile_gdf_2eproto();

            void InitAsDefaultInstance();
            static Gdf_Scene* default_instance_;
    };
    // -------------------------------------------------------------------

    class Gdf : public ::google::protobuf::Message {
        public:
            Gdf();
            virtual ~Gdf();

            Gdf(const Gdf& from);

            inline Gdf& operator=(const Gdf& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const Gdf& default_instance();

            void Swap(Gdf* other);

            // implements Message ----------------------------------------------

            Gdf* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const Gdf& from);
            void MergeFrom(const Gdf& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            typedef Gdf_System System;
            typedef Gdf_Scene Scene;

            // accessors -------------------------------------------------------

            // required string startupScene = 1;
            inline bool has_startupscene() const;
            inline void clear_startupscene();
            static const int kStartupSceneFieldNumber = 1;
            inline const ::std::string& startupscene() const;
            inline void set_startupscene(const ::std::string& value);
            inline void set_startupscene(const char* value);
            inline void set_startupscene(const char* value, size_t size);
            inline ::std::string* mutable_startupscene();
            inline ::std::string* release_startupscene();

            // repeated .Proto.Property properties = 2;
            inline int properties_size() const;
            inline void clear_properties();
            static const int kPropertiesFieldNumber = 2;
            inline const ::Proto::Property& properties(int index) const;
            inline ::Proto::Property* mutable_properties(int index);
            inline ::Proto::Property* add_properties();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
            properties() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
            mutable_properties();

            // repeated .Proto.Gdf.System systems = 3;
            inline int systems_size() const;
            inline void clear_systems();
            static const int kSystemsFieldNumber = 3;
            inline const ::Proto::Gdf_System& systems(int index) const;
            inline ::Proto::Gdf_System* mutable_systems(int index);
            inline ::Proto::Gdf_System* add_systems();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_System >&
            systems() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_System >*
            mutable_systems();

            // repeated .Proto.Gdf.Scene scenes = 4;
            inline int scenes_size() const;
            inline void clear_scenes();
            static const int kScenesFieldNumber = 4;
            inline const ::Proto::Gdf_Scene& scenes(int index) const;
            inline ::Proto::Gdf_Scene* mutable_scenes(int index);
            inline ::Proto::Gdf_Scene* add_scenes();
            inline const ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_Scene >&
            scenes() const;
            inline ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_Scene >*
            mutable_scenes();

            // @@protoc_insertion_point(class_scope:Proto.Gdf)
        private:
            inline void set_has_startupscene();
            inline void clear_has_startupscene();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            ::std::string* startupscene_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Property > properties_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_System > systems_;
            ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_Scene > scenes_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

            friend void  protobuf_AddDesc_gdf_2eproto();
            friend void protobuf_AssignDesc_gdf_2eproto();
            friend void protobuf_ShutdownFile_gdf_2eproto();

            void InitAsDefaultInstance();
            static Gdf* default_instance_;
    };
    // ===================================================================


    // ===================================================================

    // Gdf_System

    // required string type = 10;
    inline bool Gdf_System::has_type() const {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void Gdf_System::set_has_type() {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void Gdf_System::clear_has_type() {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void Gdf_System::clear_type() {
        if (type_ != &::google::protobuf::internal::kEmptyString) {
            type_->clear();
        }

        clear_has_type();
    }
    inline const ::std::string& Gdf_System::type() const {
        return *type_;
    }
    inline void Gdf_System::set_type(const ::std::string& value) {
        set_has_type();

        if (type_ == &::google::protobuf::internal::kEmptyString) {
            type_ = new ::std::string;
        }

        type_->assign(value);
    }
    inline void Gdf_System::set_type(const char* value) {
        set_has_type();

        if (type_ == &::google::protobuf::internal::kEmptyString) {
            type_ = new ::std::string;
        }

        type_->assign(value);
    }
    inline void Gdf_System::set_type(const char* value, size_t size) {
        set_has_type();

        if (type_ == &::google::protobuf::internal::kEmptyString) {
            type_ = new ::std::string;
        }

        type_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Gdf_System::mutable_type() {
        set_has_type();

        if (type_ == &::google::protobuf::internal::kEmptyString) {
            type_ = new ::std::string;
        }

        return type_;
    }
    inline ::std::string* Gdf_System::release_type() {
        clear_has_type();

        if (type_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = type_;
            type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // required string lib = 11;
    inline bool Gdf_System::has_lib() const {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void Gdf_System::set_has_lib() {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void Gdf_System::clear_has_lib() {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void Gdf_System::clear_lib() {
        if (lib_ != &::google::protobuf::internal::kEmptyString) {
            lib_->clear();
        }

        clear_has_lib();
    }
    inline const ::std::string& Gdf_System::lib() const {
        return *lib_;
    }
    inline void Gdf_System::set_lib(const ::std::string& value) {
        set_has_lib();

        if (lib_ == &::google::protobuf::internal::kEmptyString) {
            lib_ = new ::std::string;
        }

        lib_->assign(value);
    }
    inline void Gdf_System::set_lib(const char* value) {
        set_has_lib();

        if (lib_ == &::google::protobuf::internal::kEmptyString) {
            lib_ = new ::std::string;
        }

        lib_->assign(value);
    }
    inline void Gdf_System::set_lib(const char* value, size_t size) {
        set_has_lib();

        if (lib_ == &::google::protobuf::internal::kEmptyString) {
            lib_ = new ::std::string;
        }

        lib_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Gdf_System::mutable_lib() {
        set_has_lib();

        if (lib_ == &::google::protobuf::internal::kEmptyString) {
            lib_ = new ::std::string;
        }

        return lib_;
    }
    inline ::std::string* Gdf_System::release_lib() {
        clear_has_lib();

        if (lib_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = lib_;
            lib_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // repeated .Proto.Property properties = 12;
    inline int Gdf_System::properties_size() const {
        return properties_.size();
    }
    inline void Gdf_System::clear_properties() {
        properties_.Clear();
    }
    inline const ::Proto::Property& Gdf_System::properties(int index) const {
        return properties_.Get(index);
    }
    inline ::Proto::Property* Gdf_System::mutable_properties(int index) {
        return properties_.Mutable(index);
    }
    inline ::Proto::Property* Gdf_System::add_properties() {
        return properties_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
    Gdf_System::properties() const {
        return properties_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
    Gdf_System::mutable_properties() {
        return &properties_;
    }

    // -------------------------------------------------------------------

    // Gdf_Scene

    // required string name = 20;
    inline bool Gdf_Scene::has_name() const {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void Gdf_Scene::set_has_name() {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void Gdf_Scene::clear_has_name() {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void Gdf_Scene::clear_name() {
        if (name_ != &::google::protobuf::internal::kEmptyString) {
            name_->clear();
        }

        clear_has_name();
    }
    inline const ::std::string& Gdf_Scene::name() const {
        return *name_;
    }
    inline void Gdf_Scene::set_name(const ::std::string& value) {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        name_->assign(value);
    }
    inline void Gdf_Scene::set_name(const char* value) {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        name_->assign(value);
    }
    inline void Gdf_Scene::set_name(const char* value, size_t size) {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        name_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Gdf_Scene::mutable_name() {
        set_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }

        return name_;
    }
    inline ::std::string* Gdf_Scene::release_name() {
        clear_has_name();

        if (name_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = name_;
            name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // required string sdf = 21;
    inline bool Gdf_Scene::has_sdf() const {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void Gdf_Scene::set_has_sdf() {
        _has_bits_[0] |= 0x00000002u;
    }
    inline void Gdf_Scene::clear_has_sdf() {
        _has_bits_[0] &= ~0x00000002u;
    }
    inline void Gdf_Scene::clear_sdf() {
        if (sdf_ != &::google::protobuf::internal::kEmptyString) {
            sdf_->clear();
        }

        clear_has_sdf();
    }
    inline const ::std::string& Gdf_Scene::sdf() const {
        return *sdf_;
    }
    inline void Gdf_Scene::set_sdf(const ::std::string& value) {
        set_has_sdf();

        if (sdf_ == &::google::protobuf::internal::kEmptyString) {
            sdf_ = new ::std::string;
        }

        sdf_->assign(value);
    }
    inline void Gdf_Scene::set_sdf(const char* value) {
        set_has_sdf();

        if (sdf_ == &::google::protobuf::internal::kEmptyString) {
            sdf_ = new ::std::string;
        }

        sdf_->assign(value);
    }
    inline void Gdf_Scene::set_sdf(const char* value, size_t size) {
        set_has_sdf();

        if (sdf_ == &::google::protobuf::internal::kEmptyString) {
            sdf_ = new ::std::string;
        }

        sdf_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Gdf_Scene::mutable_sdf() {
        set_has_sdf();

        if (sdf_ == &::google::protobuf::internal::kEmptyString) {
            sdf_ = new ::std::string;
        }

        return sdf_;
    }
    inline ::std::string* Gdf_Scene::release_sdf() {
        clear_has_sdf();

        if (sdf_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = sdf_;
            sdf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // -------------------------------------------------------------------

    // Gdf

    // required string startupScene = 1;
    inline bool Gdf::has_startupscene() const {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void Gdf::set_has_startupscene() {
        _has_bits_[0] |= 0x00000001u;
    }
    inline void Gdf::clear_has_startupscene() {
        _has_bits_[0] &= ~0x00000001u;
    }
    inline void Gdf::clear_startupscene() {
        if (startupscene_ != &::google::protobuf::internal::kEmptyString) {
            startupscene_->clear();
        }

        clear_has_startupscene();
    }
    inline const ::std::string& Gdf::startupscene() const {
        return *startupscene_;
    }
    inline void Gdf::set_startupscene(const ::std::string& value) {
        set_has_startupscene();

        if (startupscene_ == &::google::protobuf::internal::kEmptyString) {
            startupscene_ = new ::std::string;
        }

        startupscene_->assign(value);
    }
    inline void Gdf::set_startupscene(const char* value) {
        set_has_startupscene();

        if (startupscene_ == &::google::protobuf::internal::kEmptyString) {
            startupscene_ = new ::std::string;
        }

        startupscene_->assign(value);
    }
    inline void Gdf::set_startupscene(const char* value, size_t size) {
        set_has_startupscene();

        if (startupscene_ == &::google::protobuf::internal::kEmptyString) {
            startupscene_ = new ::std::string;
        }

        startupscene_->assign(reinterpret_cast<const char*>(value), size);
    }
    inline ::std::string* Gdf::mutable_startupscene() {
        set_has_startupscene();

        if (startupscene_ == &::google::protobuf::internal::kEmptyString) {
            startupscene_ = new ::std::string;
        }

        return startupscene_;
    }
    inline ::std::string* Gdf::release_startupscene() {
        clear_has_startupscene();

        if (startupscene_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string* temp = startupscene_;
            startupscene_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    // repeated .Proto.Property properties = 2;
    inline int Gdf::properties_size() const {
        return properties_.size();
    }
    inline void Gdf::clear_properties() {
        properties_.Clear();
    }
    inline const ::Proto::Property& Gdf::properties(int index) const {
        return properties_.Get(index);
    }
    inline ::Proto::Property* Gdf::mutable_properties(int index) {
        return properties_.Mutable(index);
    }
    inline ::Proto::Property* Gdf::add_properties() {
        return properties_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Property >&
    Gdf::properties() const {
        return properties_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Property >*
    Gdf::mutable_properties() {
        return &properties_;
    }

    // repeated .Proto.Gdf.System systems = 3;
    inline int Gdf::systems_size() const {
        return systems_.size();
    }
    inline void Gdf::clear_systems() {
        systems_.Clear();
    }
    inline const ::Proto::Gdf_System& Gdf::systems(int index) const {
        return systems_.Get(index);
    }
    inline ::Proto::Gdf_System* Gdf::mutable_systems(int index) {
        return systems_.Mutable(index);
    }
    inline ::Proto::Gdf_System* Gdf::add_systems() {
        return systems_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_System >&
    Gdf::systems() const {
        return systems_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_System >*
    Gdf::mutable_systems() {
        return &systems_;
    }

    // repeated .Proto.Gdf.Scene scenes = 4;
    inline int Gdf::scenes_size() const {
        return scenes_.size();
    }
    inline void Gdf::clear_scenes() {
        scenes_.Clear();
    }
    inline const ::Proto::Gdf_Scene& Gdf::scenes(int index) const {
        return scenes_.Get(index);
    }
    inline ::Proto::Gdf_Scene* Gdf::mutable_scenes(int index) {
        return scenes_.Mutable(index);
    }
    inline ::Proto::Gdf_Scene* Gdf::add_scenes() {
        return scenes_.Add();
    }
    inline const ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_Scene >&
    Gdf::scenes() const {
        return scenes_;
    }
    inline ::google::protobuf::RepeatedPtrField< ::Proto::Gdf_Scene >*
    Gdf::mutable_scenes() {
        return &scenes_;
    }


    // @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

#ifndef SWIG
namespace google {
    namespace protobuf {


    }  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gdf_2eproto__INCLUDED
