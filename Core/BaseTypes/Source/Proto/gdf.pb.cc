// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gdf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Proto {

namespace {

const ::google::protobuf::Descriptor* Gdf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gdf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gdf_System_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gdf_System_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gdf_Scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gdf_Scene_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gdf_2eproto() {
  protobuf_AddDesc_gdf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gdf.proto");
  GOOGLE_CHECK(file != NULL);
  Gdf_descriptor_ = file->message_type(0);
  static const int Gdf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf, startupscene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf, systems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf, scenes_),
  };
  Gdf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gdf_descriptor_,
      Gdf::default_instance_,
      Gdf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gdf));
  Gdf_System_descriptor_ = Gdf_descriptor_->nested_type(0);
  static const int Gdf_System_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf_System, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf_System, lib_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf_System, properties_),
  };
  Gdf_System_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gdf_System_descriptor_,
      Gdf_System::default_instance_,
      Gdf_System_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf_System, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf_System, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gdf_System));
  Gdf_Scene_descriptor_ = Gdf_descriptor_->nested_type(1);
  static const int Gdf_Scene_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf_Scene, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf_Scene, sdf_),
  };
  Gdf_Scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gdf_Scene_descriptor_,
      Gdf_Scene::default_instance_,
      Gdf_Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf_Scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gdf_Scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gdf_Scene));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gdf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gdf_descriptor_, &Gdf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gdf_System_descriptor_, &Gdf_System::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gdf_Scene_descriptor_, &Gdf_Scene::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gdf_2eproto() {
  delete Gdf::default_instance_;
  delete Gdf_reflection_;
  delete Gdf_System::default_instance_;
  delete Gdf_System_reflection_;
  delete Gdf_Scene::default_instance_;
  delete Gdf_Scene_reflection_;
}

void protobuf_AddDesc_gdf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_property_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tgdf.proto\022\005Proto\032\016property.proto\"\364\001\n\003G"
    "df\022\024\n\014startupScene\030\001 \002(\t\022#\n\nproperties\030\002"
    " \003(\0132\017.Proto.Property\022\"\n\007systems\030\003 \003(\0132\021"
    ".Proto.Gdf.System\022 \n\006scenes\030\004 \003(\0132\020.Prot"
    "o.Gdf.Scene\032H\n\006System\022\014\n\004type\030\n \002(\t\022\013\n\003l"
    "ib\030\013 \002(\t\022#\n\nproperties\030\014 \003(\0132\017.Proto.Pro"
    "perty\032\"\n\005Scene\022\014\n\004name\030\024 \002(\t\022\013\n\003sdf\030\025 \002("
    "\tB%\n\026fr.kissy.encoder.protoB\010GdfProto\210\001\000", 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gdf.proto", &protobuf_RegisterTypes);
  Gdf::default_instance_ = new Gdf();
  Gdf_System::default_instance_ = new Gdf_System();
  Gdf_Scene::default_instance_ = new Gdf_Scene();
  Gdf::default_instance_->InitAsDefaultInstance();
  Gdf_System::default_instance_->InitAsDefaultInstance();
  Gdf_Scene::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gdf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gdf_2eproto {
  StaticDescriptorInitializer_gdf_2eproto() {
    protobuf_AddDesc_gdf_2eproto();
  }
} static_descriptor_initializer_gdf_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Gdf_System::kTypeFieldNumber;
const int Gdf_System::kLibFieldNumber;
const int Gdf_System::kPropertiesFieldNumber;
#endif  // !_MSC_VER

Gdf_System::Gdf_System()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gdf_System::InitAsDefaultInstance() {
}

Gdf_System::Gdf_System(const Gdf_System& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gdf_System::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lib_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gdf_System::~Gdf_System() {
  SharedDtor();
}

void Gdf_System::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (lib_ != &::google::protobuf::internal::kEmptyString) {
    delete lib_;
  }
  if (this != default_instance_) {
  }
}

void Gdf_System::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gdf_System::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gdf_System_descriptor_;
}

const Gdf_System& Gdf_System::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdf_2eproto();  return *default_instance_;
}

Gdf_System* Gdf_System::default_instance_ = NULL;

Gdf_System* Gdf_System::New() const {
  return new Gdf_System;
}

void Gdf_System::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_lib()) {
      if (lib_ != &::google::protobuf::internal::kEmptyString) {
        lib_->clear();
      }
    }
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gdf_System::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_lib;
        break;
      }
      
      // required string lib = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lib:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lib()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lib().data(), this->lib().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_properties;
        break;
      }
      
      // repeated .Proto.Property properties = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_properties;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gdf_System::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->type(), output);
  }
  
  // required string lib = 11;
  if (has_lib()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lib().data(), this->lib().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->lib(), output);
  }
  
  // repeated .Proto.Property properties = 12;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->properties(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gdf_System::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->type(), target);
  }
  
  // required string lib = 11;
  if (has_lib()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lib().data(), this->lib().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->lib(), target);
  }
  
  // repeated .Proto.Property properties = 12;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->properties(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gdf_System::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required string lib = 11;
    if (has_lib()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lib());
    }
    
  }
  // repeated .Proto.Property properties = 12;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gdf_System::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gdf_System* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gdf_System*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gdf_System::MergeFrom(const Gdf_System& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_lib()) {
      set_lib(from.lib());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gdf_System::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gdf_System::CopyFrom(const Gdf_System& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gdf_System::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  return true;
}

void Gdf_System::Swap(Gdf_System* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(lib_, other->lib_);
    properties_.Swap(&other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gdf_System::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gdf_System_descriptor_;
  metadata.reflection = Gdf_System_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Gdf_Scene::kNameFieldNumber;
const int Gdf_Scene::kSdfFieldNumber;
#endif  // !_MSC_VER

Gdf_Scene::Gdf_Scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gdf_Scene::InitAsDefaultInstance() {
}

Gdf_Scene::Gdf_Scene(const Gdf_Scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gdf_Scene::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gdf_Scene::~Gdf_Scene() {
  SharedDtor();
}

void Gdf_Scene::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (sdf_ != &::google::protobuf::internal::kEmptyString) {
    delete sdf_;
  }
  if (this != default_instance_) {
  }
}

void Gdf_Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gdf_Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gdf_Scene_descriptor_;
}

const Gdf_Scene& Gdf_Scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdf_2eproto();  return *default_instance_;
}

Gdf_Scene* Gdf_Scene::default_instance_ = NULL;

Gdf_Scene* Gdf_Scene::New() const {
  return new Gdf_Scene;
}

void Gdf_Scene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_sdf()) {
      if (sdf_ != &::google::protobuf::internal::kEmptyString) {
        sdf_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gdf_Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_sdf;
        break;
      }
      
      // required string sdf = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sdf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sdf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sdf().data(), this->sdf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gdf_Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->name(), output);
  }
  
  // required string sdf = 21;
  if (has_sdf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdf().data(), this->sdf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->sdf(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gdf_Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 20;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->name(), target);
  }
  
  // required string sdf = 21;
  if (has_sdf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sdf().data(), this->sdf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->sdf(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gdf_Scene::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 20;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string sdf = 21;
    if (has_sdf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sdf());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gdf_Scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gdf_Scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gdf_Scene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gdf_Scene::MergeFrom(const Gdf_Scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sdf()) {
      set_sdf(from.sdf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gdf_Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gdf_Scene::CopyFrom(const Gdf_Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gdf_Scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Gdf_Scene::Swap(Gdf_Scene* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sdf_, other->sdf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gdf_Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gdf_Scene_descriptor_;
  metadata.reflection = Gdf_Scene_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Gdf::kStartupSceneFieldNumber;
const int Gdf::kPropertiesFieldNumber;
const int Gdf::kSystemsFieldNumber;
const int Gdf::kScenesFieldNumber;
#endif  // !_MSC_VER

Gdf::Gdf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gdf::InitAsDefaultInstance() {
}

Gdf::Gdf(const Gdf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gdf::SharedCtor() {
  _cached_size_ = 0;
  startupscene_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gdf::~Gdf() {
  SharedDtor();
}

void Gdf::SharedDtor() {
  if (startupscene_ != &::google::protobuf::internal::kEmptyString) {
    delete startupscene_;
  }
  if (this != default_instance_) {
  }
}

void Gdf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gdf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gdf_descriptor_;
}

const Gdf& Gdf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gdf_2eproto();  return *default_instance_;
}

Gdf* Gdf::default_instance_ = NULL;

Gdf* Gdf::New() const {
  return new Gdf;
}

void Gdf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_startupscene()) {
      if (startupscene_ != &::google::protobuf::internal::kEmptyString) {
        startupscene_->clear();
      }
    }
  }
  properties_.Clear();
  systems_.Clear();
  scenes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gdf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string startupScene = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startupscene()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->startupscene().data(), this->startupscene().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        break;
      }
      
      // repeated .Proto.Property properties = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        if (input->ExpectTag(26)) goto parse_systems;
        break;
      }
      
      // repeated .Proto.Gdf.System systems = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_systems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_systems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_systems;
        if (input->ExpectTag(34)) goto parse_scenes;
        break;
      }
      
      // repeated .Proto.Gdf.Scene scenes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scenes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scenes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scenes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gdf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string startupScene = 1;
  if (has_startupscene()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startupscene().data(), this->startupscene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->startupscene(), output);
  }
  
  // repeated .Proto.Property properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->properties(i), output);
  }
  
  // repeated .Proto.Gdf.System systems = 3;
  for (int i = 0; i < this->systems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->systems(i), output);
  }
  
  // repeated .Proto.Gdf.Scene scenes = 4;
  for (int i = 0; i < this->scenes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scenes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gdf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string startupScene = 1;
  if (has_startupscene()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startupscene().data(), this->startupscene().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->startupscene(), target);
  }
  
  // repeated .Proto.Property properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->properties(i), target);
  }
  
  // repeated .Proto.Gdf.System systems = 3;
  for (int i = 0; i < this->systems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->systems(i), target);
  }
  
  // repeated .Proto.Gdf.Scene scenes = 4;
  for (int i = 0; i < this->scenes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scenes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gdf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string startupScene = 1;
    if (has_startupscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startupscene());
    }
    
  }
  // repeated .Proto.Property properties = 2;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }
  
  // repeated .Proto.Gdf.System systems = 3;
  total_size += 1 * this->systems_size();
  for (int i = 0; i < this->systems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->systems(i));
  }
  
  // repeated .Proto.Gdf.Scene scenes = 4;
  total_size += 1 * this->scenes_size();
  for (int i = 0; i < this->scenes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scenes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gdf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gdf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gdf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gdf::MergeFrom(const Gdf& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  systems_.MergeFrom(from.systems_);
  scenes_.MergeFrom(from.scenes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startupscene()) {
      set_startupscene(from.startupscene());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gdf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gdf::CopyFrom(const Gdf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gdf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < properties_size(); i++) {
    if (!this->properties(i).IsInitialized()) return false;
  }
  for (int i = 0; i < systems_size(); i++) {
    if (!this->systems(i).IsInitialized()) return false;
  }
  for (int i = 0; i < scenes_size(); i++) {
    if (!this->scenes(i).IsInitialized()) return false;
  }
  return true;
}

void Gdf::Swap(Gdf* other) {
  if (other != this) {
    std::swap(startupscene_, other->startupscene_);
    properties_.Swap(&other->properties_);
    systems_.Swap(&other->systems_);
    scenes_.Swap(&other->scenes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gdf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gdf_descriptor_;
  metadata.reflection = Gdf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

// @@protoc_insertion_point(global_scope)
